{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Rajat\\\\Desktop\\\\Graph_Visualizer\\\\frontend\\\\src\\\\components\\\\GraphLibrary.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction GraphLibrary({\n  onLoadGraph,\n  onClose\n}) {\n  _s();\n  const [graphs, setGraphs] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [selectedGraph, setSelectedGraph] = useState(null);\n\n  // ✅ FIXED: Use environment variable instead of hardcoded localhost\n  const API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000';\n  useEffect(() => {\n    fetchGraphs();\n  }, []);\n\n  // ✅ FIXED: Use environment variable for API URL\n  const fetchGraphs = async () => {\n    try {\n      setError(null);\n      const token = localStorage.getItem('token');\n      if (!token) {\n        setError('Authentication required. Please login again.');\n        setLoading(false);\n        return;\n      }\n\n      // 🔧 FIXED: Use environment variable instead of hardcoded localhost\n      const response = await fetch(`${API_BASE_URL}/api/graphs/user_graphs`, {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${token}`\n        }\n      });\n      if (!response.ok) {\n        if (response.status === 401) {\n          localStorage.removeItem('token');\n          setError('Session expired. Please login again.');\n          return;\n        }\n        throw new Error(`Failed to fetch graphs: ${response.status}`);\n      }\n      const data = await response.json();\n      if (data.success) {\n        setGraphs(data.data || []);\n      } else {\n        setError(data.error || 'Failed to load graphs');\n      }\n    } catch (error) {\n      console.error('Error fetching graphs:', error);\n      setError('Failed to load graphs. Please try again.');\n    } finally {\n      setLoading(false);\n    }\n  };\n  const handleLoadGraph = graph => {\n    const formattedNodes = graph.nodes.map((_, index) => index);\n    const formattedEdges = graph.edges.map(edge => ({\n      from: edge.from,\n      to: edge.to,\n      weight: edge.weight\n    }));\n    onLoadGraph({\n      nodes: formattedNodes,\n      edges: formattedEdges,\n      name: graph.name,\n      description: graph.description,\n      _id: graph._id\n    });\n    onClose();\n  };\n  const formatDate = dateString => {\n    return new Date(dateString).toLocaleDateString('en-US', {\n      year: 'numeric',\n      month: 'short',\n      day: 'numeric'\n    });\n  };\n\n  // ✅ FIXED: Use environment variable for delete functionality\n  const handleDeleteGraph = async (graphId, graphName, event) => {\n    event.stopPropagation();\n    if (!window.confirm(`Are you sure you want to delete \"${graphName}\"? This action cannot be undone.`)) {\n      return;\n    }\n    try {\n      const token = localStorage.getItem('token');\n      // 🔧 FIXED: Use environment variable instead of hardcoded localhost\n      const response = await fetch(`${API_BASE_URL}/api/graphs/${graphId}`, {\n        method: 'DELETE',\n        headers: {\n          'Authorization': `Bearer ${token}`\n        }\n      });\n      if (response.ok) {\n        setGraphs(graphs.filter(g => g._id !== graphId));\n        alert(`Graph \"${graphName}\" deleted successfully!`);\n      } else {\n        throw new Error('Failed to delete graph');\n      }\n    } catch (error) {\n      console.error('Error deleting graph:', error);\n      alert('Failed to delete graph. Please try again.');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"fixed inset-0 bg-black bg-opacity-50 flex justify-center items-center z-[1000] p-2 sm:p-4\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"bg-white rounded-xl sm:rounded-2xl p-4 sm:p-6 lg:p-8 \\r w-full sm:w-[95%] md:w-[90%] lg:w-[85%] xl:w-[80%] max-w-4xl\\r max-h-[95vh] sm:max-h-[90vh] md:max-h-[85vh] lg:max-h-[80vh] \\r overflow-y-auto shadow-modal\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex justify-between items-center mb-4 sm:mb-6 pb-2 border-b border-gray-200\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          className: \"text-primary-600 text-xl sm:text-2xl lg:text-3xl font-bold m-0 flex items-center\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"mr-2 text-lg sm:text-xl lg:text-2xl\",\n            children: \"\\uD83D\\uDCDA\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 126,\n            columnNumber: 13\n          }, this), \"My Graph Library\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 125,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: onClose,\n          className: \"bg-transparent border-0 text-xl sm:text-2xl cursor-pointer \\r text-gray-600 hover:text-gray-800 p-1 rounded-full hover:bg-gray-100\\r transition-colors duration-200\",\n          children: \"\\xD7\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 129,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 9\n      }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"bg-red-50 border border-red-200 rounded-lg p-4 mb-6\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"flex items-center\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"text-red-600 mr-2\",\n            children: \"\\u26A0\\uFE0F\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 143,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"text-red-800 text-sm sm:text-base\",\n            children: error\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 144,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 142,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: fetchGraphs,\n          className: \"mt-3 px-4 py-2 bg-red-600 text-white rounded-lg text-sm\\r hover:bg-red-700 transition-colors\",\n          children: \"Try Again\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 146,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 11\n      }, this), loading && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex flex-col items-center justify-center py-12 sm:py-16\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"w-6 sm:w-8 h-6 sm:h-8 mb-3 sm:mb-4 border-2 sm:border-4 \\r border-primary-600 border-t-transparent rounded-full animate-spin\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 159,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"text-gray-600 text-sm sm:text-base\",\n          children: \"Loading your graphs...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 161,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 11\n      }, this), !loading && !error && graphs.length === 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex flex-col items-center justify-center py-12 sm:py-16 text-center\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"w-16 sm:w-20 h-16 sm:h-20 mb-4 rounded-full bg-gray-100 flex items-center justify-center\",\n          children: /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"text-2xl sm:text-3xl\",\n            children: \"\\uD83D\\uDCCA\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 169,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 168,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n          className: \"text-lg sm:text-xl font-semibold text-gray-800 mb-2\",\n          children: \"No Saved Graphs Yet\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 171,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"text-gray-600 text-sm sm:text-base max-w-md mb-4\",\n          children: \"Create and save your first graph to see it here! Build a graph, run some algorithms, then click the \\\"Save Graph\\\" button.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 174,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: onClose,\n          className: \"px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700\\r transition-colors text-sm sm:text-base\",\n          children: \"Start Creating Graphs\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 178,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 11\n      }, this), !loading && !error && graphs.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"space-y-4 sm:space-y-6\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"bg-blue-50 border border-blue-200 rounded-lg p-3 sm:p-4\",\n          children: /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"text-blue-800 text-sm sm:text-base font-medium flex items-center\",\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"mr-2\",\n              children: \"\\uD83D\\uDCC8\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 194,\n              columnNumber: 17\n            }, this), \"Found \", graphs.length, \" saved graph\", graphs.length !== 1 ? 's' : '', \" in your library\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 193,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 192,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"grid grid-cols-1 lg:grid-cols-2 gap-3 sm:gap-4 lg:gap-6\",\n          children: graphs.map(graph => /*#__PURE__*/_jsxDEV(\"div\", {\n            onClick: () => handleLoadGraph(graph),\n            className: \"border border-gray-200 rounded-lg sm:rounded-xl p-3 sm:p-4 lg:p-5 \\r cursor-pointer transition-all duration-200 \\r hover:border-primary-500 hover:bg-blue-50 hover:shadow-lg \\r transform hover:scale-[1.02] active:scale-[0.98]\\r bg-white relative group\",\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: e => handleDeleteGraph(graph._id, graph.name, e),\n              className: \"absolute top-2 right-2 opacity-0 group-hover:opacity-100\\r bg-red-500 hover:bg-red-600 text-white p-1 rounded-full\\r transition-all duration-200 text-xs z-10\",\n              title: `Delete \"${graph.name}\"`,\n              children: \"\\uD83D\\uDDD1\\uFE0F\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 212,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"space-y-3 sm:space-y-4\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"flex justify-between items-start\",\n                children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"flex-1 min-w-0 pr-8\",\n                  children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n                    className: \"text-base sm:text-lg lg:text-xl font-bold text-gray-900 \\r truncate\",\n                    children: graph.name\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 226,\n                    columnNumber: 25\n                  }, this), graph.description && /*#__PURE__*/_jsxDEV(\"p\", {\n                    className: \"text-xs sm:text-sm text-gray-600 mt-1 line-clamp-2 \\r leading-relaxed\",\n                    children: graph.description\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 231,\n                    columnNumber: 27\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 225,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"flex-shrink-0 text-primary-600 font-bold text-sm sm:text-base\\r bg-primary-100 px-2 py-1 rounded-full\",\n                  children: \"Load \\u2192\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 237,\n                  columnNumber: 23\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 224,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"grid grid-cols-3 gap-2 sm:gap-4 text-center\",\n                children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"bg-gray-50 rounded-lg p-2 sm:p-3\",\n                  children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"text-lg sm:text-xl lg:text-2xl font-bold text-gray-900\",\n                    children: graph.nodes.length\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 246,\n                    columnNumber: 25\n                  }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"text-xs sm:text-sm text-gray-500 font-medium\",\n                    children: \"Nodes\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 249,\n                    columnNumber: 25\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 245,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"bg-gray-50 rounded-lg p-2 sm:p-3\",\n                  children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"text-lg sm:text-xl lg:text-2xl font-bold text-gray-900\",\n                    children: graph.edges.length\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 254,\n                    columnNumber: 25\n                  }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"text-xs sm:text-sm text-gray-500 font-medium\",\n                    children: \"Edges\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 257,\n                    columnNumber: 25\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 253,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"bg-gray-50 rounded-lg p-2 sm:p-3\",\n                  children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"text-xs sm:text-sm font-bold text-gray-900 truncate\",\n                    children: formatDate(graph.createdAt)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 262,\n                    columnNumber: 25\n                  }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"text-xs text-gray-500 font-medium\",\n                    children: \"Created\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 265,\n                    columnNumber: 25\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 261,\n                  columnNumber: 23\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 244,\n                columnNumber: 21\n              }, this), graph.tags && graph.tags.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"space-y-2\",\n                children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"text-xs sm:text-sm font-medium text-gray-700\",\n                  children: \"Tags:\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 274,\n                  columnNumber: 25\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"flex flex-wrap gap-1 sm:gap-2\",\n                  children: graph.tags.map((tag, index) => /*#__PURE__*/_jsxDEV(\"span\", {\n                    className: \"bg-primary-100 text-primary-800 px-2 py-1 \\r rounded-full text-xs font-medium\\r border border-primary-200\",\n                    children: tag\n                  }, index, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 277,\n                    columnNumber: 29\n                  }, this))\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 275,\n                  columnNumber: 25\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 273,\n                columnNumber: 23\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"text-xs sm:text-sm text-gray-500 pt-2 border-t border-gray-100\",\n                children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"font-medium\",\n                  children: \"Your Graph\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 292,\n                  columnNumber: 23\n                }, this), \" \\u2022 Created \", formatDate(graph.createdAt)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 291,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 222,\n              columnNumber: 19\n            }, this)]\n          }, graph._id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 202,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 200,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 190,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 117,\n    columnNumber: 5\n  }, this);\n}\n_s(GraphLibrary, \"JvD4Li+hWCmM+1duBPGudJNLvq4=\");\n_c = GraphLibrary;\nexport default GraphLibrary;\n\n// import React, { useState, useEffect } from 'react';\n\n// function GraphLibrary({ onLoadGraph, onClose }) {\n//   const [graphs, setGraphs] = useState([]);\n//   const [loading, setLoading] = useState(true);\n//   const [error, setError] = useState(null);\n//   const [selectedGraph, setSelectedGraph] = useState(null);\n\n//   useEffect(() => {\n//     fetchGraphs();\n//   }, []);\n\n//   // ✅ FIXED: Changed URL to correct endpoint\n//   const fetchGraphs = async () => {\n//     try {\n//       setError(null);\n//       const token = localStorage.getItem('token');\n\n//       if (!token) {\n//         setError('Authentication required. Please login again.');\n//         setLoading(false);\n//         return;\n//       }\n\n//       // 🔧 FIXED: Changed from /save_graph to /user_graphs\n//       const response = await fetch('http://localhost:5000/api/graphs/user_graphs', {\n//         method: 'GET',\n//         headers: {\n//           'Content-Type': 'application/json',\n//           'Authorization': `Bearer ${token}`\n//         }\n//       });\n\n//       if (!response.ok) {\n//         if (response.status === 401) {\n//           localStorage.removeItem('token');\n//           setError('Session expired. Please login again.');\n//           return;\n//         }\n//         throw new Error(`Failed to fetch graphs: ${response.status}`);\n//       }\n\n//       const data = await response.json();\n//       if (data.success) {\n//         setGraphs(data.data || []);\n//       } else {\n//         setError(data.error || 'Failed to load graphs');\n//       }\n//     } catch (error) {\n//       console.error('Error fetching graphs:', error);\n//       setError('Failed to load graphs. Please try again.');\n//     } finally {\n//       setLoading(false);\n//     }\n//   };\n\n//   const handleLoadGraph = (graph) => {\n//     const formattedNodes = graph.nodes.map((_, index) => index);\n//     const formattedEdges = graph.edges.map(edge => ({\n//       from: edge.from,\n//       to: edge.to,\n//       weight: edge.weight\n//     }));\n\n//     onLoadGraph({\n//       nodes: formattedNodes,\n//       edges: formattedEdges,\n//       name: graph.name,\n//       description: graph.description,\n//       _id: graph._id\n//     });\n//     onClose();\n//   };\n\n//   const formatDate = (dateString) => {\n//     return new Date(dateString).toLocaleDateString('en-US', {\n//       year: 'numeric',\n//       month: 'short',\n//       day: 'numeric'\n//     });\n//   };\n\n//   // Delete graph functionality\n//   const handleDeleteGraph = async (graphId, graphName, event) => {\n//     event.stopPropagation();\n\n//     if (!window.confirm(`Are you sure you want to delete \"${graphName}\"? This action cannot be undone.`)) {\n//       return;\n//     }\n\n//     try {\n//       const token = localStorage.getItem('token');\n//       const response = await fetch(`http://localhost:5000/api/graphs/${graphId}`, {\n//         method: 'DELETE',\n//         headers: {\n//           'Authorization': `Bearer ${token}`\n//         }\n//       });\n\n//       if (response.ok) {\n//         setGraphs(graphs.filter(g => g._id !== graphId));\n//         alert(`Graph \"${graphName}\" deleted successfully!`);\n//       } else {\n//         throw new Error('Failed to delete graph');\n//       }\n//     } catch (error) {\n//       console.error('Error deleting graph:', error);\n//       alert('Failed to delete graph. Please try again.');\n//     }\n//   };\n\n//   return (\n//     <div className=\"fixed inset-0 bg-black bg-opacity-50 flex justify-center items-center z-[1000] p-2 sm:p-4\">\n//       <div className=\"bg-white rounded-xl sm:rounded-2xl p-4 sm:p-6 lg:p-8 \n//                       w-full sm:w-[95%] md:w-[90%] lg:w-[85%] xl:w-[80%] max-w-4xl\n//                       max-h-[95vh] sm:max-h-[90vh] md:max-h-[85vh] lg:max-h-[80vh] \n//                       overflow-y-auto shadow-modal\">\n\n//         {/* Header */}\n//         <div className=\"flex justify-between items-center mb-4 sm:mb-6 pb-2 border-b border-gray-200\">\n//           <h2 className=\"text-primary-600 text-xl sm:text-2xl lg:text-3xl font-bold m-0 flex items-center\">\n//             <span className=\"mr-2 text-lg sm:text-xl lg:text-2xl\">📚</span>\n//             My Graph Library\n//           </h2>\n//           <button\n//             onClick={onClose}\n//             className=\"bg-transparent border-0 text-xl sm:text-2xl cursor-pointer \n//                        text-gray-600 hover:text-gray-800 p-1 rounded-full hover:bg-gray-100\n//                        transition-colors duration-200\"\n//           >\n//             ×\n//           </button>\n//         </div>\n\n//         {/* Error State */}\n//         {error && (\n//           <div className=\"bg-red-50 border border-red-200 rounded-lg p-4 mb-6\">\n//             <div className=\"flex items-center\">\n//               <span className=\"text-red-600 mr-2\">⚠️</span>\n//               <p className=\"text-red-800 text-sm sm:text-base\">{error}</p>\n//             </div>\n//             <button\n//               onClick={fetchGraphs}\n//               className=\"mt-3 px-4 py-2 bg-red-600 text-white rounded-lg text-sm\n//                          hover:bg-red-700 transition-colors\"\n//             >\n//               Try Again\n//             </button>\n//           </div>\n//         )}\n\n//         {/* Loading State */}\n//         {loading && (\n//           <div className=\"flex flex-col items-center justify-center py-12 sm:py-16\">\n//             <div className=\"w-6 sm:w-8 h-6 sm:h-8 mb-3 sm:mb-4 border-2 sm:border-4 \n//                             border-primary-600 border-t-transparent rounded-full animate-spin\"></div>\n//             <p className=\"text-gray-600 text-sm sm:text-base\">Loading your graphs...</p>\n//           </div>\n//         )}\n\n//         {/* Empty State */}\n//         {!loading && !error && graphs.length === 0 && (\n//           <div className=\"flex flex-col items-center justify-center py-12 sm:py-16 text-center\">\n//             <div className=\"w-16 sm:w-20 h-16 sm:h-20 mb-4 rounded-full bg-gray-100 flex items-center justify-center\">\n//               <span className=\"text-2xl sm:text-3xl\">📊</span>\n//             </div>\n//             <h3 className=\"text-lg sm:text-xl font-semibold text-gray-800 mb-2\">\n//               No Saved Graphs Yet\n//             </h3>\n//             <p className=\"text-gray-600 text-sm sm:text-base max-w-md mb-4\">\n//               Create and save your first graph to see it here! Build a graph, run some algorithms, \n//               then click the \"Save Graph\" button.\n//             </p>\n//             <button\n//               onClick={onClose}\n//               className=\"px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700\n//                          transition-colors text-sm sm:text-base\"\n//             >\n//               Start Creating Graphs\n//             </button>\n//           </div>\n//         )}\n\n//         {/* Graphs List */}\n//         {!loading && !error && graphs.length > 0 && (\n//           <div className=\"space-y-4 sm:space-y-6\">\n//             {/* Graph Count */}\n//             <div className=\"bg-blue-50 border border-blue-200 rounded-lg p-3 sm:p-4\">\n//               <p className=\"text-blue-800 text-sm sm:text-base font-medium flex items-center\">\n//                 <span className=\"mr-2\">📈</span>\n//                 Found {graphs.length} saved graph{graphs.length !== 1 ? 's' : ''} in your library\n//               </p>\n//             </div>\n\n//             {/* Graphs Grid */}\n//             <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-3 sm:gap-4 lg:gap-6\">\n//               {graphs.map((graph) => (\n//                 <div\n//                   key={graph._id}\n//                   onClick={() => handleLoadGraph(graph)}\n//                   className=\"border border-gray-200 rounded-lg sm:rounded-xl p-3 sm:p-4 lg:p-5 \n//                              cursor-pointer transition-all duration-200 \n//                              hover:border-primary-500 hover:bg-blue-50 hover:shadow-lg \n//                              transform hover:scale-[1.02] active:scale-[0.98]\n//                              bg-white relative group\"\n//                 >\n//                   {/* Delete button */}\n//                   <button\n//                     onClick={(e) => handleDeleteGraph(graph._id, graph.name, e)}\n//                     className=\"absolute top-2 right-2 opacity-0 group-hover:opacity-100\n//                                bg-red-500 hover:bg-red-600 text-white p-1 rounded-full\n//                                transition-all duration-200 text-xs z-10\"\n//                     title={`Delete \"${graph.name}\"`}\n//                   >\n//                     🗑️\n//                   </button>\n\n//                   <div className=\"space-y-3 sm:space-y-4\">\n//                     {/* Graph Header */}\n//                     <div className=\"flex justify-between items-start\">\n//                       <div className=\"flex-1 min-w-0 pr-8\">\n//                         <h3 className=\"text-base sm:text-lg lg:text-xl font-bold text-gray-900 \n//                                        truncate\">\n//                           {graph.name}\n//                         </h3>\n//                         {graph.description && (\n//                           <p className=\"text-xs sm:text-sm text-gray-600 mt-1 line-clamp-2 \n//                                         leading-relaxed\">\n//                             {graph.description}\n//                           </p>\n//                         )}\n//                       </div>\n//                       <div className=\"flex-shrink-0 text-primary-600 font-bold text-sm sm:text-base\n//                                       bg-primary-100 px-2 py-1 rounded-full\">\n//                         Load →\n//                       </div>\n//                     </div>\n\n//                     {/* Graph Stats */}\n//                     <div className=\"grid grid-cols-3 gap-2 sm:gap-4 text-center\">\n//                       <div className=\"bg-gray-50 rounded-lg p-2 sm:p-3\">\n//                         <div className=\"text-lg sm:text-xl lg:text-2xl font-bold text-gray-900\">\n//                           {graph.nodes.length}\n//                         </div>\n//                         <div className=\"text-xs sm:text-sm text-gray-500 font-medium\">\n//                           Nodes\n//                         </div>\n//                       </div>\n//                       <div className=\"bg-gray-50 rounded-lg p-2 sm:p-3\">\n//                         <div className=\"text-lg sm:text-xl lg:text-2xl font-bold text-gray-900\">\n//                           {graph.edges.length}\n//                         </div>\n//                         <div className=\"text-xs sm:text-sm text-gray-500 font-medium\">\n//                           Edges\n//                         </div>\n//                       </div>\n//                       <div className=\"bg-gray-50 rounded-lg p-2 sm:p-3\">\n//                         <div className=\"text-xs sm:text-sm font-bold text-gray-900 truncate\">\n//                           {formatDate(graph.createdAt)}\n//                         </div>\n//                         <div className=\"text-xs text-gray-500 font-medium\">\n//                           Created\n//                         </div>\n//                       </div>\n//                     </div>\n\n//                     {/* Tags */}\n//                     {graph.tags && graph.tags.length > 0 && (\n//                       <div className=\"space-y-2\">\n//                         <div className=\"text-xs sm:text-sm font-medium text-gray-700\">Tags:</div>\n//                         <div className=\"flex flex-wrap gap-1 sm:gap-2\">\n//                           {graph.tags.map((tag, index) => (\n//                             <span\n//                               key={index}\n//                               className=\"bg-primary-100 text-primary-800 px-2 py-1 \n//                                          rounded-full text-xs font-medium\n//                                          border border-primary-200\"\n//                             >\n//                               {tag}\n//                             </span>\n//                           ))}\n//                         </div>\n//                       </div>\n//                     )}\n\n//                     {/* Creator Info */}\n//                     <div className=\"text-xs sm:text-sm text-gray-500 pt-2 border-t border-gray-100\">\n//                       <span className=\"font-medium\">Your Graph</span> • Created {formatDate(graph.createdAt)}\n//                     </div>\n//                   </div>\n//                 </div>\n//               ))}\n//             </div>\n//           </div>\n//         )}\n//       </div>\n//     </div>\n//   );\n// }\n\n// export default GraphLibrary;\n\n// import React, { useState, useEffect } from 'react';\n\n// function GraphLibrary({ onLoadGraph, onClose }) {\n//   const [graphs, setGraphs] = useState([]);\n//   const [loading, setLoading] = useState(true);\n//   const [selectedGraph, setSelectedGraph] = useState(null);\n\n//   useEffect(() => {\n//     fetchGraphs();\n//   }, []);\n\n//   const fetchGraphs = async () => {\n//     try {\n//       const response = await fetch('http://localhost:5000/api/db/graphs');\n//       const data = await response.json();\n//       if (data.success) {\n//         setGraphs(data.data);\n//       }\n//     } catch (error) {\n//       console.error('Error fetching graphs:', error);\n//     } finally {\n//       setLoading(false);\n//     }\n//   };\n\n//   const handleLoadGraph = (graph) => {\n//     const formattedNodes = graph.nodes.map((_, index) => index);\n//     const formattedEdges = graph.edges.map(edge => ({\n//       from: edge.from,\n//       to: edge.to,\n//       weight: edge.weight\n//     }));\n\n//     onLoadGraph({\n//       nodes: formattedNodes,\n//       edges: formattedEdges,\n//       name: graph.name,\n//       description: graph.description\n//     });\n//     onClose();\n//   };\n\n//   const formatDate = (dateString) => {\n//     return new Date(dateString).toLocaleDateString('en-US', {\n//       year: 'numeric',\n//       month: 'short',\n//       day: 'numeric'\n//     });\n//   };\n\n//   return (\n//     <div style={{\n//       position: 'fixed',\n//       top: 0,\n//       left: 0,\n//       right: 0,\n//       bottom: 0,\n//       backgroundColor: 'rgba(0,0,0,0.5)',\n//       display: 'flex',\n//       justifyContent: 'center',\n//       alignItems: 'center',\n//       zIndex: 1000\n//     }}>\n//       <div style={{\n//         backgroundColor: 'white',\n//         borderRadius: '16px',\n//         padding: '2rem',\n//         maxWidth: '800px',\n//         maxHeight: '80vh',\n//         overflowY: 'auto',\n//         boxShadow: '0 20px 40px rgba(0,0,0,0.3)'\n//       }}>\n//         <div style={{\n//           display: 'flex',\n//           justifyContent: 'space-between',\n//           alignItems: 'center',\n//           marginBottom: '1.5rem'\n//         }}>\n//           <h2 style={{ color: '#2563eb', margin: 0 }}>Graph Library</h2>\n//           <button\n//             onClick={onClose}\n//             style={{\n//               background: 'none',\n//               border: 'none',\n//               fontSize: '1.5rem',\n//               cursor: 'pointer',\n//               color: '#666'\n//             }}\n//           >\n//             ×\n//           </button>\n//         </div>\n\n//         {loading ? (\n//           <div style={{ textAlign: 'center', padding: '2rem' }}>\n//             <p>Loading graphs...</p>\n//           </div>\n//         ) : graphs.length === 0 ? (\n//           <div style={{ textAlign: 'center', padding: '2rem' }}>\n//             <p>No saved graphs found. Create and save your first graph!</p>\n//           </div>\n//         ) : (\n//           <div>\n//             <p style={{ marginBottom: '1rem' }}>\n//               Found {graphs.length} saved graph{graphs.length !== 1 ? 's' : ''}\n//             </p>\n//             <div style={{ display: 'grid', gap: '1rem' }}>\n//               {graphs.map((graph) => (\n//                 <div\n//                   key={graph._id}\n//                   style={{\n//                     border: '1px solid #e5e7eb',\n//                     borderRadius: '8px',\n//                     padding: '1rem',\n//                     cursor: 'pointer',\n//                     transition: 'all 0.2s',\n//                     ':hover': {\n//                       borderColor: '#2563eb',\n//                       backgroundColor: '#f8fafc'\n//                     }\n//                   }}\n//                   onClick={() => handleLoadGraph(graph)}\n//                 >\n//                   <div style={{\n//                     display: 'flex',\n//                     justifyContent: 'space-between',\n//                     alignItems: 'flex-start'\n//                   }}>\n//                     <div style={{ flex: 1 }}>\n//                       <h3 style={{\n//                         margin: '0 0 0.5rem 0',\n//                         color: '#1f2937',\n//                         fontSize: '1.1rem'\n//                       }}>\n//                         {graph.name}\n//                       </h3>\n//                       {graph.description && (\n//                         <p style={{\n//                           margin: '0 0 0.5rem 0',\n//                           color: '#6b7280',\n//                           fontSize: '0.9rem'\n//                         }}>\n//                           {graph.description}\n//                         </p>\n//                       )}\n//                       <div style={{\n//                         display: 'flex',\n//                         gap: '1rem',\n//                         fontSize: '0.8rem',\n//                         color: '#9ca3af'\n//                       }}>\n//                         <span>{graph.nodes.length} nodes</span>\n//                         <span>{graph.edges.length} edges</span>\n//                         <span>Created: {formatDate(graph.createdAt)}</span>\n//                       </div>\n//                       {graph.tags && graph.tags.length > 0 && (\n//                         <div style={{ marginTop: '0.5rem' }}>\n//                           {graph.tags.map((tag, index) => (\n//                             <span\n//                               key={index}\n//                               style={{\n//                                 backgroundColor: '#e0eafc',\n//                                 color: '#2563eb',\n//                                 padding: '0.2rem 0.5rem',\n//                                 borderRadius: '4px',\n//                                 fontSize: '0.7rem',\n//                                 marginRight: '0.5rem'\n//                               }}\n//                             >\n//                               {tag}\n//                             </span>\n//                           ))}\n//                         </div>\n//                       )}\n//                     </div>\n//                     <div style={{\n//                       color: '#2563eb',\n//                       fontSize: '0.9rem',\n//                       fontWeight: 'bold'\n//                     }}>\n//                       Load →\n//                     </div>\n//                   </div>\n//                 </div>\n//               ))}\n//             </div>\n//           </div>\n//         )}\n//       </div>\n//     </div>\n//   );\n// }\n\n// export default GraphLibrary;\nvar _c;\n$RefreshReg$(_c, \"GraphLibrary\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","GraphLibrary","onLoadGraph","onClose","_s","graphs","setGraphs","loading","setLoading","error","setError","selectedGraph","setSelectedGraph","API_BASE_URL","process","env","REACT_APP_API_URL","fetchGraphs","token","localStorage","getItem","response","fetch","method","headers","ok","status","removeItem","Error","data","json","success","console","handleLoadGraph","graph","formattedNodes","nodes","map","_","index","formattedEdges","edges","edge","from","to","weight","name","description","_id","formatDate","dateString","Date","toLocaleDateString","year","month","day","handleDeleteGraph","graphId","graphName","event","stopPropagation","window","confirm","filter","g","alert","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","length","e","title","createdAt","tags","tag","_c","$RefreshReg$"],"sources":["C:/Users/Rajat/Desktop/Graph_Visualizer/frontend/src/components/GraphLibrary.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\n\r\nfunction GraphLibrary({ onLoadGraph, onClose }) {\r\n  const [graphs, setGraphs] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n  const [selectedGraph, setSelectedGraph] = useState(null);\r\n\r\n  // ✅ FIXED: Use environment variable instead of hardcoded localhost\r\n  const API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000';\r\n\r\n  useEffect(() => {\r\n    fetchGraphs();\r\n  }, []);\r\n\r\n  // ✅ FIXED: Use environment variable for API URL\r\n  const fetchGraphs = async () => {\r\n    try {\r\n      setError(null);\r\n      const token = localStorage.getItem('token');\r\n      \r\n      if (!token) {\r\n        setError('Authentication required. Please login again.');\r\n        setLoading(false);\r\n        return;\r\n      }\r\n\r\n      // 🔧 FIXED: Use environment variable instead of hardcoded localhost\r\n      const response = await fetch(`${API_BASE_URL}/api/graphs/user_graphs`, {\r\n        method: 'GET',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          'Authorization': `Bearer ${token}`\r\n        }\r\n      });\r\n\r\n      if (!response.ok) {\r\n        if (response.status === 401) {\r\n          localStorage.removeItem('token');\r\n          setError('Session expired. Please login again.');\r\n          return;\r\n        }\r\n        throw new Error(`Failed to fetch graphs: ${response.status}`);\r\n      }\r\n\r\n      const data = await response.json();\r\n      if (data.success) {\r\n        setGraphs(data.data || []);\r\n      } else {\r\n        setError(data.error || 'Failed to load graphs');\r\n      }\r\n    } catch (error) {\r\n      console.error('Error fetching graphs:', error);\r\n      setError('Failed to load graphs. Please try again.');\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const handleLoadGraph = (graph) => {\r\n    const formattedNodes = graph.nodes.map((_, index) => index);\r\n    const formattedEdges = graph.edges.map(edge => ({\r\n      from: edge.from,\r\n      to: edge.to,\r\n      weight: edge.weight\r\n    }));\r\n    \r\n    onLoadGraph({\r\n      nodes: formattedNodes,\r\n      edges: formattedEdges,\r\n      name: graph.name,\r\n      description: graph.description,\r\n      _id: graph._id\r\n    });\r\n    onClose();\r\n  };\r\n\r\n  const formatDate = (dateString) => {\r\n    return new Date(dateString).toLocaleDateString('en-US', {\r\n      year: 'numeric',\r\n      month: 'short',\r\n      day: 'numeric'\r\n    });\r\n  };\r\n\r\n  // ✅ FIXED: Use environment variable for delete functionality\r\n  const handleDeleteGraph = async (graphId, graphName, event) => {\r\n    event.stopPropagation();\r\n    \r\n    if (!window.confirm(`Are you sure you want to delete \"${graphName}\"? This action cannot be undone.`)) {\r\n      return;\r\n    }\r\n\r\n    try {\r\n      const token = localStorage.getItem('token');\r\n      // 🔧 FIXED: Use environment variable instead of hardcoded localhost\r\n      const response = await fetch(`${API_BASE_URL}/api/graphs/${graphId}`, {\r\n        method: 'DELETE',\r\n        headers: {\r\n          'Authorization': `Bearer ${token}`\r\n        }\r\n      });\r\n\r\n      if (response.ok) {\r\n        setGraphs(graphs.filter(g => g._id !== graphId));\r\n        alert(`Graph \"${graphName}\" deleted successfully!`);\r\n      } else {\r\n        throw new Error('Failed to delete graph');\r\n      }\r\n    } catch (error) {\r\n      console.error('Error deleting graph:', error);\r\n      alert('Failed to delete graph. Please try again.');\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"fixed inset-0 bg-black bg-opacity-50 flex justify-center items-center z-[1000] p-2 sm:p-4\">\r\n      <div className=\"bg-white rounded-xl sm:rounded-2xl p-4 sm:p-6 lg:p-8 \r\n                      w-full sm:w-[95%] md:w-[90%] lg:w-[85%] xl:w-[80%] max-w-4xl\r\n                      max-h-[95vh] sm:max-h-[90vh] md:max-h-[85vh] lg:max-h-[80vh] \r\n                      overflow-y-auto shadow-modal\">\r\n        \r\n        {/* Header */}\r\n        <div className=\"flex justify-between items-center mb-4 sm:mb-6 pb-2 border-b border-gray-200\">\r\n          <h2 className=\"text-primary-600 text-xl sm:text-2xl lg:text-3xl font-bold m-0 flex items-center\">\r\n            <span className=\"mr-2 text-lg sm:text-xl lg:text-2xl\">📚</span>\r\n            My Graph Library\r\n          </h2>\r\n          <button\r\n            onClick={onClose}\r\n            className=\"bg-transparent border-0 text-xl sm:text-2xl cursor-pointer \r\n                       text-gray-600 hover:text-gray-800 p-1 rounded-full hover:bg-gray-100\r\n                       transition-colors duration-200\"\r\n          >\r\n            ×\r\n          </button>\r\n        </div>\r\n\r\n        {/* Error State */}\r\n        {error && (\r\n          <div className=\"bg-red-50 border border-red-200 rounded-lg p-4 mb-6\">\r\n            <div className=\"flex items-center\">\r\n              <span className=\"text-red-600 mr-2\">⚠️</span>\r\n              <p className=\"text-red-800 text-sm sm:text-base\">{error}</p>\r\n            </div>\r\n            <button\r\n              onClick={fetchGraphs}\r\n              className=\"mt-3 px-4 py-2 bg-red-600 text-white rounded-lg text-sm\r\n                         hover:bg-red-700 transition-colors\"\r\n            >\r\n              Try Again\r\n            </button>\r\n          </div>\r\n        )}\r\n\r\n        {/* Loading State */}\r\n        {loading && (\r\n          <div className=\"flex flex-col items-center justify-center py-12 sm:py-16\">\r\n            <div className=\"w-6 sm:w-8 h-6 sm:h-8 mb-3 sm:mb-4 border-2 sm:border-4 \r\n                            border-primary-600 border-t-transparent rounded-full animate-spin\"></div>\r\n            <p className=\"text-gray-600 text-sm sm:text-base\">Loading your graphs...</p>\r\n          </div>\r\n        )}\r\n\r\n        {/* Empty State */}\r\n        {!loading && !error && graphs.length === 0 && (\r\n          <div className=\"flex flex-col items-center justify-center py-12 sm:py-16 text-center\">\r\n            <div className=\"w-16 sm:w-20 h-16 sm:h-20 mb-4 rounded-full bg-gray-100 flex items-center justify-center\">\r\n              <span className=\"text-2xl sm:text-3xl\">📊</span>\r\n            </div>\r\n            <h3 className=\"text-lg sm:text-xl font-semibold text-gray-800 mb-2\">\r\n              No Saved Graphs Yet\r\n            </h3>\r\n            <p className=\"text-gray-600 text-sm sm:text-base max-w-md mb-4\">\r\n              Create and save your first graph to see it here! Build a graph, run some algorithms, \r\n              then click the \"Save Graph\" button.\r\n            </p>\r\n            <button\r\n              onClick={onClose}\r\n              className=\"px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700\r\n                         transition-colors text-sm sm:text-base\"\r\n            >\r\n              Start Creating Graphs\r\n            </button>\r\n          </div>\r\n        )}\r\n\r\n        {/* Graphs List */}\r\n        {!loading && !error && graphs.length > 0 && (\r\n          <div className=\"space-y-4 sm:space-y-6\">\r\n            {/* Graph Count */}\r\n            <div className=\"bg-blue-50 border border-blue-200 rounded-lg p-3 sm:p-4\">\r\n              <p className=\"text-blue-800 text-sm sm:text-base font-medium flex items-center\">\r\n                <span className=\"mr-2\">📈</span>\r\n                Found {graphs.length} saved graph{graphs.length !== 1 ? 's' : ''} in your library\r\n              </p>\r\n            </div>\r\n\r\n            {/* Graphs Grid */}\r\n            <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-3 sm:gap-4 lg:gap-6\">\r\n              {graphs.map((graph) => (\r\n                <div\r\n                  key={graph._id}\r\n                  onClick={() => handleLoadGraph(graph)}\r\n                  className=\"border border-gray-200 rounded-lg sm:rounded-xl p-3 sm:p-4 lg:p-5 \r\n                             cursor-pointer transition-all duration-200 \r\n                             hover:border-primary-500 hover:bg-blue-50 hover:shadow-lg \r\n                             transform hover:scale-[1.02] active:scale-[0.98]\r\n                             bg-white relative group\"\r\n                >\r\n                  {/* Delete button */}\r\n                  <button\r\n                    onClick={(e) => handleDeleteGraph(graph._id, graph.name, e)}\r\n                    className=\"absolute top-2 right-2 opacity-0 group-hover:opacity-100\r\n                               bg-red-500 hover:bg-red-600 text-white p-1 rounded-full\r\n                               transition-all duration-200 text-xs z-10\"\r\n                    title={`Delete \"${graph.name}\"`}\r\n                  >\r\n                    🗑️\r\n                  </button>\r\n\r\n                  <div className=\"space-y-3 sm:space-y-4\">\r\n                    {/* Graph Header */}\r\n                    <div className=\"flex justify-between items-start\">\r\n                      <div className=\"flex-1 min-w-0 pr-8\">\r\n                        <h3 className=\"text-base sm:text-lg lg:text-xl font-bold text-gray-900 \r\n                                       truncate\">\r\n                          {graph.name}\r\n                        </h3>\r\n                        {graph.description && (\r\n                          <p className=\"text-xs sm:text-sm text-gray-600 mt-1 line-clamp-2 \r\n                                        leading-relaxed\">\r\n                            {graph.description}\r\n                          </p>\r\n                        )}\r\n                      </div>\r\n                      <div className=\"flex-shrink-0 text-primary-600 font-bold text-sm sm:text-base\r\n                                      bg-primary-100 px-2 py-1 rounded-full\">\r\n                        Load →\r\n                      </div>\r\n                    </div>\r\n\r\n                    {/* Graph Stats */}\r\n                    <div className=\"grid grid-cols-3 gap-2 sm:gap-4 text-center\">\r\n                      <div className=\"bg-gray-50 rounded-lg p-2 sm:p-3\">\r\n                        <div className=\"text-lg sm:text-xl lg:text-2xl font-bold text-gray-900\">\r\n                          {graph.nodes.length}\r\n                        </div>\r\n                        <div className=\"text-xs sm:text-sm text-gray-500 font-medium\">\r\n                          Nodes\r\n                        </div>\r\n                      </div>\r\n                      <div className=\"bg-gray-50 rounded-lg p-2 sm:p-3\">\r\n                        <div className=\"text-lg sm:text-xl lg:text-2xl font-bold text-gray-900\">\r\n                          {graph.edges.length}\r\n                        </div>\r\n                        <div className=\"text-xs sm:text-sm text-gray-500 font-medium\">\r\n                          Edges\r\n                        </div>\r\n                      </div>\r\n                      <div className=\"bg-gray-50 rounded-lg p-2 sm:p-3\">\r\n                        <div className=\"text-xs sm:text-sm font-bold text-gray-900 truncate\">\r\n                          {formatDate(graph.createdAt)}\r\n                        </div>\r\n                        <div className=\"text-xs text-gray-500 font-medium\">\r\n                          Created\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n\r\n                    {/* Tags */}\r\n                    {graph.tags && graph.tags.length > 0 && (\r\n                      <div className=\"space-y-2\">\r\n                        <div className=\"text-xs sm:text-sm font-medium text-gray-700\">Tags:</div>\r\n                        <div className=\"flex flex-wrap gap-1 sm:gap-2\">\r\n                          {graph.tags.map((tag, index) => (\r\n                            <span\r\n                              key={index}\r\n                              className=\"bg-primary-100 text-primary-800 px-2 py-1 \r\n                                         rounded-full text-xs font-medium\r\n                                         border border-primary-200\"\r\n                            >\r\n                              {tag}\r\n                            </span>\r\n                          ))}\r\n                        </div>\r\n                      </div>\r\n                    )}\r\n\r\n                    {/* Creator Info */}\r\n                    <div className=\"text-xs sm:text-sm text-gray-500 pt-2 border-t border-gray-100\">\r\n                      <span className=\"font-medium\">Your Graph</span> • Created {formatDate(graph.createdAt)}\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              ))}\r\n            </div>\r\n          </div>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default GraphLibrary;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// import React, { useState, useEffect } from 'react';\r\n\r\n// function GraphLibrary({ onLoadGraph, onClose }) {\r\n//   const [graphs, setGraphs] = useState([]);\r\n//   const [loading, setLoading] = useState(true);\r\n//   const [error, setError] = useState(null);\r\n//   const [selectedGraph, setSelectedGraph] = useState(null);\r\n\r\n//   useEffect(() => {\r\n//     fetchGraphs();\r\n//   }, []);\r\n\r\n//   // ✅ FIXED: Changed URL to correct endpoint\r\n//   const fetchGraphs = async () => {\r\n//     try {\r\n//       setError(null);\r\n//       const token = localStorage.getItem('token');\r\n      \r\n//       if (!token) {\r\n//         setError('Authentication required. Please login again.');\r\n//         setLoading(false);\r\n//         return;\r\n//       }\r\n\r\n//       // 🔧 FIXED: Changed from /save_graph to /user_graphs\r\n//       const response = await fetch('http://localhost:5000/api/graphs/user_graphs', {\r\n//         method: 'GET',\r\n//         headers: {\r\n//           'Content-Type': 'application/json',\r\n//           'Authorization': `Bearer ${token}`\r\n//         }\r\n//       });\r\n\r\n//       if (!response.ok) {\r\n//         if (response.status === 401) {\r\n//           localStorage.removeItem('token');\r\n//           setError('Session expired. Please login again.');\r\n//           return;\r\n//         }\r\n//         throw new Error(`Failed to fetch graphs: ${response.status}`);\r\n//       }\r\n\r\n//       const data = await response.json();\r\n//       if (data.success) {\r\n//         setGraphs(data.data || []);\r\n//       } else {\r\n//         setError(data.error || 'Failed to load graphs');\r\n//       }\r\n//     } catch (error) {\r\n//       console.error('Error fetching graphs:', error);\r\n//       setError('Failed to load graphs. Please try again.');\r\n//     } finally {\r\n//       setLoading(false);\r\n//     }\r\n//   };\r\n\r\n//   const handleLoadGraph = (graph) => {\r\n//     const formattedNodes = graph.nodes.map((_, index) => index);\r\n//     const formattedEdges = graph.edges.map(edge => ({\r\n//       from: edge.from,\r\n//       to: edge.to,\r\n//       weight: edge.weight\r\n//     }));\r\n    \r\n//     onLoadGraph({\r\n//       nodes: formattedNodes,\r\n//       edges: formattedEdges,\r\n//       name: graph.name,\r\n//       description: graph.description,\r\n//       _id: graph._id\r\n//     });\r\n//     onClose();\r\n//   };\r\n\r\n//   const formatDate = (dateString) => {\r\n//     return new Date(dateString).toLocaleDateString('en-US', {\r\n//       year: 'numeric',\r\n//       month: 'short',\r\n//       day: 'numeric'\r\n//     });\r\n//   };\r\n\r\n//   // Delete graph functionality\r\n//   const handleDeleteGraph = async (graphId, graphName, event) => {\r\n//     event.stopPropagation();\r\n    \r\n//     if (!window.confirm(`Are you sure you want to delete \"${graphName}\"? This action cannot be undone.`)) {\r\n//       return;\r\n//     }\r\n\r\n//     try {\r\n//       const token = localStorage.getItem('token');\r\n//       const response = await fetch(`http://localhost:5000/api/graphs/${graphId}`, {\r\n//         method: 'DELETE',\r\n//         headers: {\r\n//           'Authorization': `Bearer ${token}`\r\n//         }\r\n//       });\r\n\r\n//       if (response.ok) {\r\n//         setGraphs(graphs.filter(g => g._id !== graphId));\r\n//         alert(`Graph \"${graphName}\" deleted successfully!`);\r\n//       } else {\r\n//         throw new Error('Failed to delete graph');\r\n//       }\r\n//     } catch (error) {\r\n//       console.error('Error deleting graph:', error);\r\n//       alert('Failed to delete graph. Please try again.');\r\n//     }\r\n//   };\r\n\r\n//   return (\r\n//     <div className=\"fixed inset-0 bg-black bg-opacity-50 flex justify-center items-center z-[1000] p-2 sm:p-4\">\r\n//       <div className=\"bg-white rounded-xl sm:rounded-2xl p-4 sm:p-6 lg:p-8 \r\n//                       w-full sm:w-[95%] md:w-[90%] lg:w-[85%] xl:w-[80%] max-w-4xl\r\n//                       max-h-[95vh] sm:max-h-[90vh] md:max-h-[85vh] lg:max-h-[80vh] \r\n//                       overflow-y-auto shadow-modal\">\r\n        \r\n//         {/* Header */}\r\n//         <div className=\"flex justify-between items-center mb-4 sm:mb-6 pb-2 border-b border-gray-200\">\r\n//           <h2 className=\"text-primary-600 text-xl sm:text-2xl lg:text-3xl font-bold m-0 flex items-center\">\r\n//             <span className=\"mr-2 text-lg sm:text-xl lg:text-2xl\">📚</span>\r\n//             My Graph Library\r\n//           </h2>\r\n//           <button\r\n//             onClick={onClose}\r\n//             className=\"bg-transparent border-0 text-xl sm:text-2xl cursor-pointer \r\n//                        text-gray-600 hover:text-gray-800 p-1 rounded-full hover:bg-gray-100\r\n//                        transition-colors duration-200\"\r\n//           >\r\n//             ×\r\n//           </button>\r\n//         </div>\r\n\r\n//         {/* Error State */}\r\n//         {error && (\r\n//           <div className=\"bg-red-50 border border-red-200 rounded-lg p-4 mb-6\">\r\n//             <div className=\"flex items-center\">\r\n//               <span className=\"text-red-600 mr-2\">⚠️</span>\r\n//               <p className=\"text-red-800 text-sm sm:text-base\">{error}</p>\r\n//             </div>\r\n//             <button\r\n//               onClick={fetchGraphs}\r\n//               className=\"mt-3 px-4 py-2 bg-red-600 text-white rounded-lg text-sm\r\n//                          hover:bg-red-700 transition-colors\"\r\n//             >\r\n//               Try Again\r\n//             </button>\r\n//           </div>\r\n//         )}\r\n\r\n//         {/* Loading State */}\r\n//         {loading && (\r\n//           <div className=\"flex flex-col items-center justify-center py-12 sm:py-16\">\r\n//             <div className=\"w-6 sm:w-8 h-6 sm:h-8 mb-3 sm:mb-4 border-2 sm:border-4 \r\n//                             border-primary-600 border-t-transparent rounded-full animate-spin\"></div>\r\n//             <p className=\"text-gray-600 text-sm sm:text-base\">Loading your graphs...</p>\r\n//           </div>\r\n//         )}\r\n\r\n//         {/* Empty State */}\r\n//         {!loading && !error && graphs.length === 0 && (\r\n//           <div className=\"flex flex-col items-center justify-center py-12 sm:py-16 text-center\">\r\n//             <div className=\"w-16 sm:w-20 h-16 sm:h-20 mb-4 rounded-full bg-gray-100 flex items-center justify-center\">\r\n//               <span className=\"text-2xl sm:text-3xl\">📊</span>\r\n//             </div>\r\n//             <h3 className=\"text-lg sm:text-xl font-semibold text-gray-800 mb-2\">\r\n//               No Saved Graphs Yet\r\n//             </h3>\r\n//             <p className=\"text-gray-600 text-sm sm:text-base max-w-md mb-4\">\r\n//               Create and save your first graph to see it here! Build a graph, run some algorithms, \r\n//               then click the \"Save Graph\" button.\r\n//             </p>\r\n//             <button\r\n//               onClick={onClose}\r\n//               className=\"px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700\r\n//                          transition-colors text-sm sm:text-base\"\r\n//             >\r\n//               Start Creating Graphs\r\n//             </button>\r\n//           </div>\r\n//         )}\r\n\r\n//         {/* Graphs List */}\r\n//         {!loading && !error && graphs.length > 0 && (\r\n//           <div className=\"space-y-4 sm:space-y-6\">\r\n//             {/* Graph Count */}\r\n//             <div className=\"bg-blue-50 border border-blue-200 rounded-lg p-3 sm:p-4\">\r\n//               <p className=\"text-blue-800 text-sm sm:text-base font-medium flex items-center\">\r\n//                 <span className=\"mr-2\">📈</span>\r\n//                 Found {graphs.length} saved graph{graphs.length !== 1 ? 's' : ''} in your library\r\n//               </p>\r\n//             </div>\r\n\r\n//             {/* Graphs Grid */}\r\n//             <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-3 sm:gap-4 lg:gap-6\">\r\n//               {graphs.map((graph) => (\r\n//                 <div\r\n//                   key={graph._id}\r\n//                   onClick={() => handleLoadGraph(graph)}\r\n//                   className=\"border border-gray-200 rounded-lg sm:rounded-xl p-3 sm:p-4 lg:p-5 \r\n//                              cursor-pointer transition-all duration-200 \r\n//                              hover:border-primary-500 hover:bg-blue-50 hover:shadow-lg \r\n//                              transform hover:scale-[1.02] active:scale-[0.98]\r\n//                              bg-white relative group\"\r\n//                 >\r\n//                   {/* Delete button */}\r\n//                   <button\r\n//                     onClick={(e) => handleDeleteGraph(graph._id, graph.name, e)}\r\n//                     className=\"absolute top-2 right-2 opacity-0 group-hover:opacity-100\r\n//                                bg-red-500 hover:bg-red-600 text-white p-1 rounded-full\r\n//                                transition-all duration-200 text-xs z-10\"\r\n//                     title={`Delete \"${graph.name}\"`}\r\n//                   >\r\n//                     🗑️\r\n//                   </button>\r\n\r\n//                   <div className=\"space-y-3 sm:space-y-4\">\r\n//                     {/* Graph Header */}\r\n//                     <div className=\"flex justify-between items-start\">\r\n//                       <div className=\"flex-1 min-w-0 pr-8\">\r\n//                         <h3 className=\"text-base sm:text-lg lg:text-xl font-bold text-gray-900 \r\n//                                        truncate\">\r\n//                           {graph.name}\r\n//                         </h3>\r\n//                         {graph.description && (\r\n//                           <p className=\"text-xs sm:text-sm text-gray-600 mt-1 line-clamp-2 \r\n//                                         leading-relaxed\">\r\n//                             {graph.description}\r\n//                           </p>\r\n//                         )}\r\n//                       </div>\r\n//                       <div className=\"flex-shrink-0 text-primary-600 font-bold text-sm sm:text-base\r\n//                                       bg-primary-100 px-2 py-1 rounded-full\">\r\n//                         Load →\r\n//                       </div>\r\n//                     </div>\r\n\r\n//                     {/* Graph Stats */}\r\n//                     <div className=\"grid grid-cols-3 gap-2 sm:gap-4 text-center\">\r\n//                       <div className=\"bg-gray-50 rounded-lg p-2 sm:p-3\">\r\n//                         <div className=\"text-lg sm:text-xl lg:text-2xl font-bold text-gray-900\">\r\n//                           {graph.nodes.length}\r\n//                         </div>\r\n//                         <div className=\"text-xs sm:text-sm text-gray-500 font-medium\">\r\n//                           Nodes\r\n//                         </div>\r\n//                       </div>\r\n//                       <div className=\"bg-gray-50 rounded-lg p-2 sm:p-3\">\r\n//                         <div className=\"text-lg sm:text-xl lg:text-2xl font-bold text-gray-900\">\r\n//                           {graph.edges.length}\r\n//                         </div>\r\n//                         <div className=\"text-xs sm:text-sm text-gray-500 font-medium\">\r\n//                           Edges\r\n//                         </div>\r\n//                       </div>\r\n//                       <div className=\"bg-gray-50 rounded-lg p-2 sm:p-3\">\r\n//                         <div className=\"text-xs sm:text-sm font-bold text-gray-900 truncate\">\r\n//                           {formatDate(graph.createdAt)}\r\n//                         </div>\r\n//                         <div className=\"text-xs text-gray-500 font-medium\">\r\n//                           Created\r\n//                         </div>\r\n//                       </div>\r\n//                     </div>\r\n\r\n//                     {/* Tags */}\r\n//                     {graph.tags && graph.tags.length > 0 && (\r\n//                       <div className=\"space-y-2\">\r\n//                         <div className=\"text-xs sm:text-sm font-medium text-gray-700\">Tags:</div>\r\n//                         <div className=\"flex flex-wrap gap-1 sm:gap-2\">\r\n//                           {graph.tags.map((tag, index) => (\r\n//                             <span\r\n//                               key={index}\r\n//                               className=\"bg-primary-100 text-primary-800 px-2 py-1 \r\n//                                          rounded-full text-xs font-medium\r\n//                                          border border-primary-200\"\r\n//                             >\r\n//                               {tag}\r\n//                             </span>\r\n//                           ))}\r\n//                         </div>\r\n//                       </div>\r\n//                     )}\r\n\r\n//                     {/* Creator Info */}\r\n//                     <div className=\"text-xs sm:text-sm text-gray-500 pt-2 border-t border-gray-100\">\r\n//                       <span className=\"font-medium\">Your Graph</span> • Created {formatDate(graph.createdAt)}\r\n//                     </div>\r\n//                   </div>\r\n//                 </div>\r\n//               ))}\r\n//             </div>\r\n//           </div>\r\n//         )}\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// }\r\n\r\n// export default GraphLibrary;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// import React, { useState, useEffect } from 'react';\r\n\r\n// function GraphLibrary({ onLoadGraph, onClose }) {\r\n//   const [graphs, setGraphs] = useState([]);\r\n//   const [loading, setLoading] = useState(true);\r\n//   const [selectedGraph, setSelectedGraph] = useState(null);\r\n\r\n//   useEffect(() => {\r\n//     fetchGraphs();\r\n//   }, []);\r\n\r\n//   const fetchGraphs = async () => {\r\n//     try {\r\n//       const response = await fetch('http://localhost:5000/api/db/graphs');\r\n//       const data = await response.json();\r\n//       if (data.success) {\r\n//         setGraphs(data.data);\r\n//       }\r\n//     } catch (error) {\r\n//       console.error('Error fetching graphs:', error);\r\n//     } finally {\r\n//       setLoading(false);\r\n//     }\r\n//   };\r\n\r\n//   const handleLoadGraph = (graph) => {\r\n//     const formattedNodes = graph.nodes.map((_, index) => index);\r\n//     const formattedEdges = graph.edges.map(edge => ({\r\n//       from: edge.from,\r\n//       to: edge.to,\r\n//       weight: edge.weight\r\n//     }));\r\n    \r\n//     onLoadGraph({\r\n//       nodes: formattedNodes,\r\n//       edges: formattedEdges,\r\n//       name: graph.name,\r\n//       description: graph.description\r\n//     });\r\n//     onClose();\r\n//   };\r\n\r\n//   const formatDate = (dateString) => {\r\n//     return new Date(dateString).toLocaleDateString('en-US', {\r\n//       year: 'numeric',\r\n//       month: 'short',\r\n//       day: 'numeric'\r\n//     });\r\n//   };\r\n\r\n//   return (\r\n//     <div style={{\r\n//       position: 'fixed',\r\n//       top: 0,\r\n//       left: 0,\r\n//       right: 0,\r\n//       bottom: 0,\r\n//       backgroundColor: 'rgba(0,0,0,0.5)',\r\n//       display: 'flex',\r\n//       justifyContent: 'center',\r\n//       alignItems: 'center',\r\n//       zIndex: 1000\r\n//     }}>\r\n//       <div style={{\r\n//         backgroundColor: 'white',\r\n//         borderRadius: '16px',\r\n//         padding: '2rem',\r\n//         maxWidth: '800px',\r\n//         maxHeight: '80vh',\r\n//         overflowY: 'auto',\r\n//         boxShadow: '0 20px 40px rgba(0,0,0,0.3)'\r\n//       }}>\r\n//         <div style={{\r\n//           display: 'flex',\r\n//           justifyContent: 'space-between',\r\n//           alignItems: 'center',\r\n//           marginBottom: '1.5rem'\r\n//         }}>\r\n//           <h2 style={{ color: '#2563eb', margin: 0 }}>Graph Library</h2>\r\n//           <button\r\n//             onClick={onClose}\r\n//             style={{\r\n//               background: 'none',\r\n//               border: 'none',\r\n//               fontSize: '1.5rem',\r\n//               cursor: 'pointer',\r\n//               color: '#666'\r\n//             }}\r\n//           >\r\n//             ×\r\n//           </button>\r\n//         </div>\r\n\r\n//         {loading ? (\r\n//           <div style={{ textAlign: 'center', padding: '2rem' }}>\r\n//             <p>Loading graphs...</p>\r\n//           </div>\r\n//         ) : graphs.length === 0 ? (\r\n//           <div style={{ textAlign: 'center', padding: '2rem' }}>\r\n//             <p>No saved graphs found. Create and save your first graph!</p>\r\n//           </div>\r\n//         ) : (\r\n//           <div>\r\n//             <p style={{ marginBottom: '1rem' }}>\r\n//               Found {graphs.length} saved graph{graphs.length !== 1 ? 's' : ''}\r\n//             </p>\r\n//             <div style={{ display: 'grid', gap: '1rem' }}>\r\n//               {graphs.map((graph) => (\r\n//                 <div\r\n//                   key={graph._id}\r\n//                   style={{\r\n//                     border: '1px solid #e5e7eb',\r\n//                     borderRadius: '8px',\r\n//                     padding: '1rem',\r\n//                     cursor: 'pointer',\r\n//                     transition: 'all 0.2s',\r\n//                     ':hover': {\r\n//                       borderColor: '#2563eb',\r\n//                       backgroundColor: '#f8fafc'\r\n//                     }\r\n//                   }}\r\n//                   onClick={() => handleLoadGraph(graph)}\r\n//                 >\r\n//                   <div style={{\r\n//                     display: 'flex',\r\n//                     justifyContent: 'space-between',\r\n//                     alignItems: 'flex-start'\r\n//                   }}>\r\n//                     <div style={{ flex: 1 }}>\r\n//                       <h3 style={{\r\n//                         margin: '0 0 0.5rem 0',\r\n//                         color: '#1f2937',\r\n//                         fontSize: '1.1rem'\r\n//                       }}>\r\n//                         {graph.name}\r\n//                       </h3>\r\n//                       {graph.description && (\r\n//                         <p style={{\r\n//                           margin: '0 0 0.5rem 0',\r\n//                           color: '#6b7280',\r\n//                           fontSize: '0.9rem'\r\n//                         }}>\r\n//                           {graph.description}\r\n//                         </p>\r\n//                       )}\r\n//                       <div style={{\r\n//                         display: 'flex',\r\n//                         gap: '1rem',\r\n//                         fontSize: '0.8rem',\r\n//                         color: '#9ca3af'\r\n//                       }}>\r\n//                         <span>{graph.nodes.length} nodes</span>\r\n//                         <span>{graph.edges.length} edges</span>\r\n//                         <span>Created: {formatDate(graph.createdAt)}</span>\r\n//                       </div>\r\n//                       {graph.tags && graph.tags.length > 0 && (\r\n//                         <div style={{ marginTop: '0.5rem' }}>\r\n//                           {graph.tags.map((tag, index) => (\r\n//                             <span\r\n//                               key={index}\r\n//                               style={{\r\n//                                 backgroundColor: '#e0eafc',\r\n//                                 color: '#2563eb',\r\n//                                 padding: '0.2rem 0.5rem',\r\n//                                 borderRadius: '4px',\r\n//                                 fontSize: '0.7rem',\r\n//                                 marginRight: '0.5rem'\r\n//                               }}\r\n//                             >\r\n//                               {tag}\r\n//                             </span>\r\n//                           ))}\r\n//                         </div>\r\n//                       )}\r\n//                     </div>\r\n//                     <div style={{\r\n//                       color: '#2563eb',\r\n//                       fontSize: '0.9rem',\r\n//                       fontWeight: 'bold'\r\n//                     }}>\r\n//                       Load →\r\n//                     </div>\r\n//                   </div>\r\n//                 </div>\r\n//               ))}\r\n//             </div>\r\n//           </div>\r\n//         )}\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// }\r\n\r\n// export default GraphLibrary;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnD,SAASC,YAAYA,CAAC;EAAEC,WAAW;EAAEC;AAAQ,CAAC,EAAE;EAAAC,EAAA;EAC9C,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EACxC,MAAM,CAACU,OAAO,EAAEC,UAAU,CAAC,GAAGX,QAAQ,CAAC,IAAI,CAAC;EAC5C,MAAM,CAACY,KAAK,EAAEC,QAAQ,CAAC,GAAGb,QAAQ,CAAC,IAAI,CAAC;EACxC,MAAM,CAACc,aAAa,EAAEC,gBAAgB,CAAC,GAAGf,QAAQ,CAAC,IAAI,CAAC;;EAExD;EACA,MAAMgB,YAAY,GAAGC,OAAO,CAACC,GAAG,CAACC,iBAAiB,IAAI,uBAAuB;EAE7ElB,SAAS,CAAC,MAAM;IACdmB,WAAW,CAAC,CAAC;EACf,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA,MAAMA,WAAW,GAAG,MAAAA,CAAA,KAAY;IAC9B,IAAI;MACFP,QAAQ,CAAC,IAAI,CAAC;MACd,MAAMQ,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;MAE3C,IAAI,CAACF,KAAK,EAAE;QACVR,QAAQ,CAAC,8CAA8C,CAAC;QACxDF,UAAU,CAAC,KAAK,CAAC;QACjB;MACF;;MAEA;MACA,MAAMa,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGT,YAAY,yBAAyB,EAAE;QACrEU,MAAM,EAAE,KAAK;QACbC,OAAO,EAAE;UACP,cAAc,EAAE,kBAAkB;UAClC,eAAe,EAAE,UAAUN,KAAK;QAClC;MACF,CAAC,CAAC;MAEF,IAAI,CAACG,QAAQ,CAACI,EAAE,EAAE;QAChB,IAAIJ,QAAQ,CAACK,MAAM,KAAK,GAAG,EAAE;UAC3BP,YAAY,CAACQ,UAAU,CAAC,OAAO,CAAC;UAChCjB,QAAQ,CAAC,sCAAsC,CAAC;UAChD;QACF;QACA,MAAM,IAAIkB,KAAK,CAAC,2BAA2BP,QAAQ,CAACK,MAAM,EAAE,CAAC;MAC/D;MAEA,MAAMG,IAAI,GAAG,MAAMR,QAAQ,CAACS,IAAI,CAAC,CAAC;MAClC,IAAID,IAAI,CAACE,OAAO,EAAE;QAChBzB,SAAS,CAACuB,IAAI,CAACA,IAAI,IAAI,EAAE,CAAC;MAC5B,CAAC,MAAM;QACLnB,QAAQ,CAACmB,IAAI,CAACpB,KAAK,IAAI,uBAAuB,CAAC;MACjD;IACF,CAAC,CAAC,OAAOA,KAAK,EAAE;MACduB,OAAO,CAACvB,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;MAC9CC,QAAQ,CAAC,0CAA0C,CAAC;IACtD,CAAC,SAAS;MACRF,UAAU,CAAC,KAAK,CAAC;IACnB;EACF,CAAC;EAED,MAAMyB,eAAe,GAAIC,KAAK,IAAK;IACjC,MAAMC,cAAc,GAAGD,KAAK,CAACE,KAAK,CAACC,GAAG,CAAC,CAACC,CAAC,EAAEC,KAAK,KAAKA,KAAK,CAAC;IAC3D,MAAMC,cAAc,GAAGN,KAAK,CAACO,KAAK,CAACJ,GAAG,CAACK,IAAI,KAAK;MAC9CC,IAAI,EAAED,IAAI,CAACC,IAAI;MACfC,EAAE,EAAEF,IAAI,CAACE,EAAE;MACXC,MAAM,EAAEH,IAAI,CAACG;IACf,CAAC,CAAC,CAAC;IAEH3C,WAAW,CAAC;MACVkC,KAAK,EAAED,cAAc;MACrBM,KAAK,EAAED,cAAc;MACrBM,IAAI,EAAEZ,KAAK,CAACY,IAAI;MAChBC,WAAW,EAAEb,KAAK,CAACa,WAAW;MAC9BC,GAAG,EAAEd,KAAK,CAACc;IACb,CAAC,CAAC;IACF7C,OAAO,CAAC,CAAC;EACX,CAAC;EAED,MAAM8C,UAAU,GAAIC,UAAU,IAAK;IACjC,OAAO,IAAIC,IAAI,CAACD,UAAU,CAAC,CAACE,kBAAkB,CAAC,OAAO,EAAE;MACtDC,IAAI,EAAE,SAAS;MACfC,KAAK,EAAE,OAAO;MACdC,GAAG,EAAE;IACP,CAAC,CAAC;EACJ,CAAC;;EAED;EACA,MAAMC,iBAAiB,GAAG,MAAAA,CAAOC,OAAO,EAAEC,SAAS,EAAEC,KAAK,KAAK;IAC7DA,KAAK,CAACC,eAAe,CAAC,CAAC;IAEvB,IAAI,CAACC,MAAM,CAACC,OAAO,CAAC,oCAAoCJ,SAAS,kCAAkC,CAAC,EAAE;MACpG;IACF;IAEA,IAAI;MACF,MAAMxC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;MAC3C;MACA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGT,YAAY,eAAe4C,OAAO,EAAE,EAAE;QACpElC,MAAM,EAAE,QAAQ;QAChBC,OAAO,EAAE;UACP,eAAe,EAAE,UAAUN,KAAK;QAClC;MACF,CAAC,CAAC;MAEF,IAAIG,QAAQ,CAACI,EAAE,EAAE;QACfnB,SAAS,CAACD,MAAM,CAAC0D,MAAM,CAACC,CAAC,IAAIA,CAAC,CAAChB,GAAG,KAAKS,OAAO,CAAC,CAAC;QAChDQ,KAAK,CAAC,UAAUP,SAAS,yBAAyB,CAAC;MACrD,CAAC,MAAM;QACL,MAAM,IAAI9B,KAAK,CAAC,wBAAwB,CAAC;MAC3C;IACF,CAAC,CAAC,OAAOnB,KAAK,EAAE;MACduB,OAAO,CAACvB,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;MAC7CwD,KAAK,CAAC,2CAA2C,CAAC;IACpD;EACF,CAAC;EAED,oBACEjE,OAAA;IAAKkE,SAAS,EAAC,2FAA2F;IAAAC,QAAA,eACxGnE,OAAA;MAAKkE,SAAS,EAAC,qNAG8B;MAAAC,QAAA,gBAG3CnE,OAAA;QAAKkE,SAAS,EAAC,8EAA8E;QAAAC,QAAA,gBAC3FnE,OAAA;UAAIkE,SAAS,EAAC,kFAAkF;UAAAC,QAAA,gBAC9FnE,OAAA;YAAMkE,SAAS,EAAC,qCAAqC;YAAAC,QAAA,EAAC;UAAE;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAM,CAAC,oBAEjE;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,eACLvE,OAAA;UACEwE,OAAO,EAAErE,OAAQ;UACjB+D,SAAS,EAAC,qKAEgC;UAAAC,QAAA,EAC3C;QAED;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACN,CAAC,EAGL9D,KAAK,iBACJT,OAAA;QAAKkE,SAAS,EAAC,qDAAqD;QAAAC,QAAA,gBAClEnE,OAAA;UAAKkE,SAAS,EAAC,mBAAmB;UAAAC,QAAA,gBAChCnE,OAAA;YAAMkE,SAAS,EAAC,mBAAmB;YAAAC,QAAA,EAAC;UAAE;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAM,CAAC,eAC7CvE,OAAA;YAAGkE,SAAS,EAAC,mCAAmC;YAAAC,QAAA,EAAE1D;UAAK;YAAA2D,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAI,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACzD,CAAC,eACNvE,OAAA;UACEwE,OAAO,EAAEvD,WAAY;UACrBiD,SAAS,EAAC,8FACoC;UAAAC,QAAA,EAC/C;QAED;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACN,CACN,EAGAhE,OAAO,iBACNP,OAAA;QAAKkE,SAAS,EAAC,0DAA0D;QAAAC,QAAA,gBACvEnE,OAAA;UAAKkE,SAAS,EAAC;QACmE;UAAAE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAM,CAAC,eACzFvE,OAAA;UAAGkE,SAAS,EAAC,oCAAoC;UAAAC,QAAA,EAAC;QAAsB;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAG,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACzE,CACN,EAGA,CAAChE,OAAO,IAAI,CAACE,KAAK,IAAIJ,MAAM,CAACoE,MAAM,KAAK,CAAC,iBACxCzE,OAAA;QAAKkE,SAAS,EAAC,sEAAsE;QAAAC,QAAA,gBACnFnE,OAAA;UAAKkE,SAAS,EAAC,0FAA0F;UAAAC,QAAA,eACvGnE,OAAA;YAAMkE,SAAS,EAAC,sBAAsB;YAAAC,QAAA,EAAC;UAAE;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAM;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAC7C,CAAC,eACNvE,OAAA;UAAIkE,SAAS,EAAC,qDAAqD;UAAAC,QAAA,EAAC;QAEpE;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,eACLvE,OAAA;UAAGkE,SAAS,EAAC,kDAAkD;UAAAC,QAAA,EAAC;QAGhE;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAG,CAAC,eACJvE,OAAA;UACEwE,OAAO,EAAErE,OAAQ;UACjB+D,SAAS,EAAC,wGACwC;UAAAC,QAAA,EACnD;QAED;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACN,CACN,EAGA,CAAChE,OAAO,IAAI,CAACE,KAAK,IAAIJ,MAAM,CAACoE,MAAM,GAAG,CAAC,iBACtCzE,OAAA;QAAKkE,SAAS,EAAC,wBAAwB;QAAAC,QAAA,gBAErCnE,OAAA;UAAKkE,SAAS,EAAC,yDAAyD;UAAAC,QAAA,eACtEnE,OAAA;YAAGkE,SAAS,EAAC,kEAAkE;YAAAC,QAAA,gBAC7EnE,OAAA;cAAMkE,SAAS,EAAC,MAAM;cAAAC,QAAA,EAAC;YAAE;cAAAC,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAM,CAAC,UAC1B,EAAClE,MAAM,CAACoE,MAAM,EAAC,cAAY,EAACpE,MAAM,CAACoE,MAAM,KAAK,CAAC,GAAG,GAAG,GAAG,EAAE,EAAC,kBACnE;UAAA;YAAAL,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAG;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACD,CAAC,eAGNvE,OAAA;UAAKkE,SAAS,EAAC,yDAAyD;UAAAC,QAAA,EACrE9D,MAAM,CAACgC,GAAG,CAAEH,KAAK,iBAChBlC,OAAA;YAEEwE,OAAO,EAAEA,CAAA,KAAMvC,eAAe,CAACC,KAAK,CAAE;YACtCgC,SAAS,EAAC,4PAIyB;YAAAC,QAAA,gBAGnCnE,OAAA;cACEwE,OAAO,EAAGE,CAAC,IAAKlB,iBAAiB,CAACtB,KAAK,CAACc,GAAG,EAAEd,KAAK,CAACY,IAAI,EAAE4B,CAAC,CAAE;cAC5DR,SAAS,EAAC,+JAE0C;cACpDS,KAAK,EAAE,WAAWzC,KAAK,CAACY,IAAI,GAAI;cAAAqB,QAAA,EACjC;YAED;cAAAC,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAQ,CAAC,eAETvE,OAAA;cAAKkE,SAAS,EAAC,wBAAwB;cAAAC,QAAA,gBAErCnE,OAAA;gBAAKkE,SAAS,EAAC,kCAAkC;gBAAAC,QAAA,gBAC/CnE,OAAA;kBAAKkE,SAAS,EAAC,qBAAqB;kBAAAC,QAAA,gBAClCnE,OAAA;oBAAIkE,SAAS,EAAC,qEACU;oBAAAC,QAAA,EACrBjC,KAAK,CAACY;kBAAI;oBAAAsB,QAAA,EAAAC,YAAA;oBAAAC,UAAA;oBAAAC,YAAA;kBAAA,OACT,CAAC,EACJrC,KAAK,CAACa,WAAW,iBAChB/C,OAAA;oBAAGkE,SAAS,EAAC,uEACiB;oBAAAC,QAAA,EAC3BjC,KAAK,CAACa;kBAAW;oBAAAqB,QAAA,EAAAC,YAAA;oBAAAC,UAAA;oBAAAC,YAAA;kBAAA,OACjB,CACJ;gBAAA;kBAAAH,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OACE,CAAC,eACNvE,OAAA;kBAAKkE,SAAS,EAAC,uGACuC;kBAAAC,QAAA,EAAC;gBAEvD;kBAAAC,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OAAK,CAAC;cAAA;gBAAAH,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OACH,CAAC,eAGNvE,OAAA;gBAAKkE,SAAS,EAAC,6CAA6C;gBAAAC,QAAA,gBAC1DnE,OAAA;kBAAKkE,SAAS,EAAC,kCAAkC;kBAAAC,QAAA,gBAC/CnE,OAAA;oBAAKkE,SAAS,EAAC,wDAAwD;oBAAAC,QAAA,EACpEjC,KAAK,CAACE,KAAK,CAACqC;kBAAM;oBAAAL,QAAA,EAAAC,YAAA;oBAAAC,UAAA;oBAAAC,YAAA;kBAAA,OAChB,CAAC,eACNvE,OAAA;oBAAKkE,SAAS,EAAC,8CAA8C;oBAAAC,QAAA,EAAC;kBAE9D;oBAAAC,QAAA,EAAAC,YAAA;oBAAAC,UAAA;oBAAAC,YAAA;kBAAA,OAAK,CAAC;gBAAA;kBAAAH,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OACH,CAAC,eACNvE,OAAA;kBAAKkE,SAAS,EAAC,kCAAkC;kBAAAC,QAAA,gBAC/CnE,OAAA;oBAAKkE,SAAS,EAAC,wDAAwD;oBAAAC,QAAA,EACpEjC,KAAK,CAACO,KAAK,CAACgC;kBAAM;oBAAAL,QAAA,EAAAC,YAAA;oBAAAC,UAAA;oBAAAC,YAAA;kBAAA,OAChB,CAAC,eACNvE,OAAA;oBAAKkE,SAAS,EAAC,8CAA8C;oBAAAC,QAAA,EAAC;kBAE9D;oBAAAC,QAAA,EAAAC,YAAA;oBAAAC,UAAA;oBAAAC,YAAA;kBAAA,OAAK,CAAC;gBAAA;kBAAAH,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OACH,CAAC,eACNvE,OAAA;kBAAKkE,SAAS,EAAC,kCAAkC;kBAAAC,QAAA,gBAC/CnE,OAAA;oBAAKkE,SAAS,EAAC,qDAAqD;oBAAAC,QAAA,EACjElB,UAAU,CAACf,KAAK,CAAC0C,SAAS;kBAAC;oBAAAR,QAAA,EAAAC,YAAA;oBAAAC,UAAA;oBAAAC,YAAA;kBAAA,OACzB,CAAC,eACNvE,OAAA;oBAAKkE,SAAS,EAAC,mCAAmC;oBAAAC,QAAA,EAAC;kBAEnD;oBAAAC,QAAA,EAAAC,YAAA;oBAAAC,UAAA;oBAAAC,YAAA;kBAAA,OAAK,CAAC;gBAAA;kBAAAH,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OACH,CAAC;cAAA;gBAAAH,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OACH,CAAC,EAGLrC,KAAK,CAAC2C,IAAI,IAAI3C,KAAK,CAAC2C,IAAI,CAACJ,MAAM,GAAG,CAAC,iBAClCzE,OAAA;gBAAKkE,SAAS,EAAC,WAAW;gBAAAC,QAAA,gBACxBnE,OAAA;kBAAKkE,SAAS,EAAC,8CAA8C;kBAAAC,QAAA,EAAC;gBAAK;kBAAAC,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OAAK,CAAC,eACzEvE,OAAA;kBAAKkE,SAAS,EAAC,+BAA+B;kBAAAC,QAAA,EAC3CjC,KAAK,CAAC2C,IAAI,CAACxC,GAAG,CAAC,CAACyC,GAAG,EAAEvC,KAAK,kBACzBvC,OAAA;oBAEEkE,SAAS,EAAC,2GAE2B;oBAAAC,QAAA,EAEpCW;kBAAG,GALCvC,KAAK;oBAAA6B,QAAA,EAAAC,YAAA;oBAAAC,UAAA;oBAAAC,YAAA;kBAAA,OAMN,CACP;gBAAC;kBAAAH,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OACC,CAAC;cAAA;gBAAAH,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OACH,CACN,eAGDvE,OAAA;gBAAKkE,SAAS,EAAC,gEAAgE;gBAAAC,QAAA,gBAC7EnE,OAAA;kBAAMkE,SAAS,EAAC,aAAa;kBAAAC,QAAA,EAAC;gBAAU;kBAAAC,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OAAM,CAAC,oBAAW,EAACtB,UAAU,CAACf,KAAK,CAAC0C,SAAS,CAAC;cAAA;gBAAAR,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OACnF,CAAC;YAAA;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACH,CAAC;UAAA,GA3FDrC,KAAK,CAACc,GAAG;YAAAoB,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OA4FX,CACN;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACC,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACH,CACN;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACE;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV;AAACnE,EAAA,CA5SQH,YAAY;AAAA8E,EAAA,GAAZ9E,YAAY;AA8SrB,eAAeA,YAAY;;AAaignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}