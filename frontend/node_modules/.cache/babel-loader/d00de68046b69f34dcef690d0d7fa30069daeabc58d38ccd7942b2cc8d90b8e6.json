{"ast":null,"code":"// src/api.js - Updated with environment variable\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000';\n\n// Helper function to get auth headers\nconst getAuthHeaders = () => {\n  const token = localStorage.getItem('token');\n  return {\n    'Content-Type': 'application/json',\n    ...(token && {\n      'Authorization': `Bearer ${token}`\n    })\n  };\n};\n\n// Algorithm execution - FIXED URL\nexport async function runAlgorithm(requestBody) {\n  console.log('API call with data:', requestBody);\n  try {\n    // ðŸ”§ FIXED: Added /algorithms/ to the path\n    const response = await fetch(`${API_BASE_URL}/api/graphs/algorithms/${requestBody.algorithm}`, {\n      method: 'POST',\n      headers: getAuthHeaders(),\n      body: JSON.stringify(requestBody)\n    });\n    console.log('Response status:', response.status);\n    if (!response.ok) {\n      if (response.status === 401) {\n        localStorage.removeItem('token');\n        window.location.reload();\n        throw new Error('Authentication expired. Please login again.');\n      }\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    const result = await response.json();\n    console.log('API result:', result);\n    return result;\n  } catch (error) {\n    console.error('API call failed:', error);\n    throw error;\n  }\n}\n\n// Authentication API calls\nexport async function registerUser(userData) {\n  try {\n    const response = await fetch(`${API_BASE_URL}/api/auth/register`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(userData)\n    });\n    if (!response.ok) {\n      const errorData = await response.json();\n      throw new Error(errorData.error || 'Registration failed');\n    }\n    const data = await response.json();\n    if (!data.success) {\n      throw new Error(data.error || 'Registration failed');\n    }\n    return data;\n  } catch (error) {\n    console.error('Registration error:', error);\n    throw error;\n  }\n}\nexport async function loginUser(credentials) {\n  try {\n    const response = await fetch(`${API_BASE_URL}/api/auth/login`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(credentials)\n    });\n    if (!response.ok) {\n      const errorData = await response.json();\n      throw new Error(errorData.error || 'Login failed');\n    }\n    const data = await response.json();\n    if (!data.success) {\n      throw new Error(data.error || 'Login failed');\n    }\n    return data;\n  } catch (error) {\n    console.error('Login error:', error);\n    throw error;\n  }\n}\n\n// Graph management API calls\nexport async function saveGraph(graphData) {\n  try {\n    const response = await fetch(`${API_BASE_URL}/api/graphs/save_graph`, {\n      method: 'POST',\n      headers: getAuthHeaders(),\n      body: JSON.stringify(graphData)\n    });\n    if (!response.ok) {\n      throw new Error(`Failed to save graph: ${response.status}`);\n    }\n    return await response.json();\n  } catch (error) {\n    console.error('Save graph error:', error);\n    throw error;\n  }\n}\nexport async function loadGraphs() {\n  try {\n    const response = await fetch(`${API_BASE_URL}/api/graphs/user_graphs`, {\n      method: 'GET',\n      headers: getAuthHeaders()\n    });\n    if (!response.ok) {\n      throw new Error(`Failed to load graphs: ${response.status}`);\n    }\n    return await response.json();\n  } catch (error) {\n    console.error('Load graphs error:', error);\n    throw error;\n  }\n}\nexport async function getAlgorithmHistory() {\n  try {\n    const response = await fetch(`${API_BASE_URL}/api/graphs/algorithms/results`, {\n      method: 'GET',\n      headers: getAuthHeaders()\n    });\n    if (!response.ok) {\n      throw new Error(`Failed to get history: ${response.status}`);\n    }\n    return await response.json();\n  } catch (error) {\n    console.error('Get history error:', error);\n    throw error;\n  }\n}","map":{"version":3,"names":["API_BASE_URL","process","env","REACT_APP_API_URL","getAuthHeaders","token","localStorage","getItem","runAlgorithm","requestBody","console","log","response","fetch","algorithm","method","headers","body","JSON","stringify","status","ok","removeItem","window","location","reload","Error","result","json","error","registerUser","userData","errorData","data","success","loginUser","credentials","saveGraph","graphData","loadGraphs","getAlgorithmHistory"],"sources":["C:/Users/Rajat/Desktop/Graph_Visualizer/frontend/src/api.js"],"sourcesContent":["// src/api.js - Updated with environment variable\r\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000';\r\n\r\n// Helper function to get auth headers\r\nconst getAuthHeaders = () => {\r\n  const token = localStorage.getItem('token');\r\n  return {\r\n    'Content-Type': 'application/json',\r\n    ...(token && { 'Authorization': `Bearer ${token}` })\r\n  };\r\n};\r\n\r\n// Algorithm execution - FIXED URL\r\nexport async function runAlgorithm(requestBody) {\r\n  console.log('API call with data:', requestBody);\r\n  \r\n  try {\r\n    // ðŸ”§ FIXED: Added /algorithms/ to the path\r\n    const response = await fetch(`${API_BASE_URL}/api/graphs/algorithms/${requestBody.algorithm}`, {\r\n      method: 'POST',\r\n      headers: getAuthHeaders(),\r\n      body: JSON.stringify(requestBody),\r\n    });\r\n    \r\n    console.log('Response status:', response.status);\r\n    \r\n    if (!response.ok) {\r\n      if (response.status === 401) {\r\n        localStorage.removeItem('token');\r\n        window.location.reload();\r\n        throw new Error('Authentication expired. Please login again.');\r\n      }\r\n      throw new Error(`HTTP error! status: ${response.status}`);\r\n    }\r\n    \r\n    const result = await response.json();\r\n    console.log('API result:', result);\r\n    return result;\r\n    \r\n  } catch (error) {\r\n    console.error('API call failed:', error);\r\n    throw error;\r\n  }\r\n}\r\n\r\n// Authentication API calls\r\nexport async function registerUser(userData) {\r\n  try {\r\n    const response = await fetch(`${API_BASE_URL}/api/auth/register`, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify(userData),\r\n    });\r\n\r\n    if (!response.ok) {\r\n      const errorData = await response.json();\r\n      throw new Error(errorData.error || 'Registration failed');\r\n    }\r\n\r\n    const data = await response.json();\r\n    \r\n    if (!data.success) {\r\n      throw new Error(data.error || 'Registration failed');\r\n    }\r\n\r\n    return data;\r\n  } catch (error) {\r\n    console.error('Registration error:', error);\r\n    throw error;\r\n  }\r\n}\r\n\r\nexport async function loginUser(credentials) {\r\n  try {\r\n    const response = await fetch(`${API_BASE_URL}/api/auth/login`, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify(credentials),\r\n    });\r\n\r\n    if (!response.ok) {\r\n      const errorData = await response.json();\r\n      throw new Error(errorData.error || 'Login failed');\r\n    }\r\n\r\n    const data = await response.json();\r\n    \r\n    if (!data.success) {\r\n      throw new Error(data.error || 'Login failed');\r\n    }\r\n\r\n    return data;\r\n  } catch (error) {\r\n    console.error('Login error:', error);\r\n    throw error;\r\n  }\r\n}\r\n\r\n// Graph management API calls\r\nexport async function saveGraph(graphData) {\r\n  try {\r\n    const response = await fetch(`${API_BASE_URL}/api/graphs/save_graph`, {\r\n      method: 'POST',\r\n      headers: getAuthHeaders(),\r\n      body: JSON.stringify(graphData),\r\n    });\r\n\r\n    if (!response.ok) {\r\n      throw new Error(`Failed to save graph: ${response.status}`);\r\n    }\r\n\r\n    return await response.json();\r\n  } catch (error) {\r\n    console.error('Save graph error:', error);\r\n    throw error;\r\n  }\r\n}\r\n\r\nexport async function loadGraphs() {\r\n  try {\r\n    const response = await fetch(`${API_BASE_URL}/api/graphs/user_graphs`, {\r\n      method: 'GET',\r\n      headers: getAuthHeaders(),\r\n    });\r\n\r\n    if (!response.ok) {\r\n      throw new Error(`Failed to load graphs: ${response.status}`);\r\n    }\r\n\r\n    return await response.json();\r\n  } catch (error) {\r\n    console.error('Load graphs error:', error);\r\n    throw error;\r\n  }\r\n}\r\n\r\nexport async function getAlgorithmHistory() {\r\n  try {\r\n    const response = await fetch(`${API_BASE_URL}/api/graphs/algorithms/results`, {\r\n      method: 'GET',\r\n      headers: getAuthHeaders(),\r\n    });\r\n\r\n    if (!response.ok) {\r\n      throw new Error(`Failed to get history: ${response.status}`);\r\n    }\r\n\r\n    return await response.json();\r\n  } catch (error) {\r\n    console.error('Get history error:', error);\r\n    throw error;\r\n  }\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}