{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Rajat\\\\Desktop\\\\Graph_Visualizer\\\\frontend\\\\src\\\\components\\\\GraphVisualizer.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef } from 'react';\nimport { Network } from \"vis-network\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction GraphVisualizer({\n  nodes,\n  edges,\n  output\n}) {\n  _s();\n  const containerRef = useRef();\n  useEffect(() => {\n    if (!containerRef.current) return;\n    const visNodes = nodes.map((node, idx) => ({\n      id: idx,\n      label: `Node ${idx + 1}`,\n      color: output && output.distances && output.distances[idx] === 0 ? '#ffe066' : '#a3c9f9',\n      font: {\n        color: '#333',\n        size: 22,\n        face: 'Segoe UI'\n      }\n    }));\n    const visEdges = edges.map(edge => ({\n      from: edge.from,\n      to: edge.to,\n      label: edge.weight.toString(),\n      color: output && output.mst && output.mst.find(([u, v]) => u === edge.from && v === edge.to || u === edge.to && v === edge.from) ? '#34d399' : '#b0b0b0',\n      width: output && output.mst && output.mst.find(([u, v]) => u === edge.from && v === edge.to || u === edge.to && v === edge.from) ? 5 : 2,\n      font: {\n        size: 18,\n        color: '#444'\n      }\n    }));\n    const data = {\n      nodes: visNodes,\n      edges: visEdges\n    };\n    const options = {\n      edges: {\n        arrows: {\n          to: false\n        }\n      },\n      physics: {\n        enabled: true,\n        stabilization: false\n      },\n      nodes: {\n        shape: 'ellipse',\n        size: 40\n      }\n    };\n    const network = new Network(containerRef.current, data, options);\n    return () => network.destroy();\n  }, [nodes, edges, output]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: containerRef,\n    style: {\n      height: '600px',\n      width: '100%',\n      maxWidth: '900px',\n      border: '2px solid #e0eafc',\n      borderRadius: '16px',\n      boxShadow: '0 8px 32px rgba(80,120,180,0.10)',\n      background: '#f7fbff',\n      margin: '0 auto'\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 5\n  }, this);\n}\n_s(GraphVisualizer, \"8puyVO4ts1RhCfXUmci3vLI3Njw=\");\n_c = GraphVisualizer;\nexport default GraphVisualizer;\n\n// import React, { useEffect, useRef } from 'react';\n// import { Network } from 'vis-network/standalone';\n\n// function GraphVisualizer({ nodes, edges, output }) {\n//   const containerRef = useRef();\n\n//   useEffect(() => {\n//     const visNodes = nodes.map((node, idx) => ({\n//       id: idx,\n//       label: `Node ${idx + 1}`,\n//       color: output && output.distances && output.distances[idx] === 0 ? '#ffe066' : '#a3c9f9',\n//       font: { color: '#333', size: 22, face: 'Segoe UI' }\n//     }));\n\n//     const visEdges = edges.map((edge) => ({\n//       from: edge.from,\n//       to: edge.to,\n//       label: edge.weight.toString(),\n//       color: output && output.mst && output.mst.find(\n//         ([u, v]) => (u === edge.from && v === edge.to) || (u === edge.to && v === edge.from)\n//       ) ? '#34d399' : '#b0b0b0',\n//       width: output && output.mst && output.mst.find(\n//         ([u, v]) => (u === edge.from && v === edge.to) || (u === edge.to && v === edge.from)\n//       ) ? 5 : 2,\n//       font: { size: 18, color: '#444' }\n//     }));\n\n//     const data = { nodes: visNodes, edges: visEdges };\n//     const options = {\n//       edges: { arrows: { to: false } },\n//       physics: { enabled: true, stabilization: false },\n//       nodes: { shape: 'ellipse', size: 40 }\n//     };\n\n//     const network = new Network(containerRef.current, data, options);\n//     return () => network.destroy();\n//   }, [nodes, edges, output]);\n\n//   return (\n//     <div\n//       ref={containerRef}\n//       style={{\n//         height: '600px',\n//         width: '900px',\n//         border: '2px solid #e0eafc',\n//         borderRadius: '16px',\n//         boxShadow: '0 8px 32px rgba(80,120,180,0.10)',\n//         background: '#f7fbff',\n//         margin: '0 auto'\n//       }}\n//     />\n//   );\n// }\n\n// export default GraphVisualizer;\nvar _c;\n$RefreshReg$(_c, \"GraphVisualizer\");","map":{"version":3,"names":["React","useEffect","useRef","Network","jsxDEV","_jsxDEV","GraphVisualizer","nodes","edges","output","_s","containerRef","current","visNodes","map","node","idx","id","label","color","distances","font","size","face","visEdges","edge","from","to","weight","toString","mst","find","u","v","width","data","options","arrows","physics","enabled","stabilization","shape","network","destroy","ref","style","height","maxWidth","border","borderRadius","boxShadow","background","margin","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Rajat/Desktop/Graph_Visualizer/frontend/src/components/GraphVisualizer.jsx"],"sourcesContent":["import React, { useEffect, useRef } from 'react';\r\nimport { Network } from \"vis-network\"; \r\n\r\nfunction GraphVisualizer({ nodes, edges, output }) {\r\n  const containerRef = useRef();\r\n\r\n  useEffect(() => {\r\n    if (!containerRef.current) return;\r\n\r\n    const visNodes = nodes.map((node, idx) => ({\r\n      id: idx,\r\n      label: `Node ${idx + 1}`,\r\n      color: output && output.distances && output.distances[idx] === 0 ? '#ffe066' : '#a3c9f9',\r\n      font: { color: '#333', size: 22, face: 'Segoe UI' }\r\n    }));\r\n    \r\n    const visEdges = edges.map((edge) => ({\r\n      from: edge.from,\r\n      to: edge.to,\r\n      label: edge.weight.toString(),\r\n      color: output && output.mst && output.mst.find(\r\n        ([u, v]) => (u === edge.from && v === edge.to) || (u === edge.to && v === edge.from)\r\n      ) ? '#34d399' : '#b0b0b0',\r\n      width: output && output.mst && output.mst.find(\r\n        ([u, v]) => (u === edge.from && v === edge.to) || (u === edge.to && v === edge.from)\r\n      ) ? 5 : 2,\r\n      font: { size: 18, color: '#444' }\r\n    }));\r\n    \r\n    const data = { nodes: visNodes, edges: visEdges };\r\n    const options = {\r\n      edges: { arrows: { to: false } },\r\n      physics: { enabled: true, stabilization: false },\r\n      nodes: { shape: 'ellipse', size: 40 }\r\n    };\r\n    \r\n    const network = new Network(containerRef.current, data, options);\r\n    return () => network.destroy();\r\n  }, [nodes, edges, output]);\r\n\r\n  return (\r\n    <div\r\n      ref={containerRef}\r\n      style={{\r\n        height: '600px',\r\n        width: '100%',\r\n        maxWidth: '900px',\r\n        border: '2px solid #e0eafc',\r\n        borderRadius: '16px',\r\n        boxShadow: '0 8px 32px rgba(80,120,180,0.10)',\r\n        background: '#f7fbff',\r\n        margin: '0 auto'\r\n      }}\r\n    />\r\n  );\r\n}\r\n\r\nexport default GraphVisualizer;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// import React, { useEffect, useRef } from 'react';\r\n// import { Network } from 'vis-network/standalone';\r\n\r\n// function GraphVisualizer({ nodes, edges, output }) {\r\n//   const containerRef = useRef();\r\n\r\n//   useEffect(() => {\r\n//     const visNodes = nodes.map((node, idx) => ({\r\n//       id: idx,\r\n//       label: `Node ${idx + 1}`,\r\n//       color: output && output.distances && output.distances[idx] === 0 ? '#ffe066' : '#a3c9f9',\r\n//       font: { color: '#333', size: 22, face: 'Segoe UI' }\r\n//     }));\r\n    \r\n//     const visEdges = edges.map((edge) => ({\r\n//       from: edge.from,\r\n//       to: edge.to,\r\n//       label: edge.weight.toString(),\r\n//       color: output && output.mst && output.mst.find(\r\n//         ([u, v]) => (u === edge.from && v === edge.to) || (u === edge.to && v === edge.from)\r\n//       ) ? '#34d399' : '#b0b0b0',\r\n//       width: output && output.mst && output.mst.find(\r\n//         ([u, v]) => (u === edge.from && v === edge.to) || (u === edge.to && v === edge.from)\r\n//       ) ? 5 : 2,\r\n//       font: { size: 18, color: '#444' }\r\n//     }));\r\n    \r\n//     const data = { nodes: visNodes, edges: visEdges };\r\n//     const options = {\r\n//       edges: { arrows: { to: false } },\r\n//       physics: { enabled: true, stabilization: false },\r\n//       nodes: { shape: 'ellipse', size: 40 }\r\n//     };\r\n    \r\n//     const network = new Network(containerRef.current, data, options);\r\n//     return () => network.destroy();\r\n//   }, [nodes, edges, output]);\r\n\r\n//   return (\r\n//     <div\r\n//       ref={containerRef}\r\n//       style={{\r\n//         height: '600px',\r\n//         width: '900px',\r\n//         border: '2px solid #e0eafc',\r\n//         borderRadius: '16px',\r\n//         boxShadow: '0 8px 32px rgba(80,120,180,0.10)',\r\n//         background: '#f7fbff',\r\n//         margin: '0 auto'\r\n//       }}\r\n//     />\r\n//   );\r\n// }\r\n\r\n// export default GraphVisualizer;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}