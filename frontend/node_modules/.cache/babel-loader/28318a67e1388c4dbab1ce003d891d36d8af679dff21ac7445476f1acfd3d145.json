{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Rajat\\\\Desktop\\\\Graph_Visualizer\\\\frontend\\\\src\\\\contexts\\\\AuthContext.jsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\n\n// âœ… FIXED: Use environment variable instead of hardcoded localhost\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000';\nexport const useAuth = () => {\n  _s();\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n_s(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const AuthProvider = ({\n  children\n}) => {\n  _s2();\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [token, setToken] = useState(localStorage.getItem('token'));\n\n  // Check if user is logged in on app start\n  useEffect(() => {\n    const checkAuth = async () => {\n      if (token) {\n        try {\n          // ðŸ”§ FIXED: Now uses environment variable\n          const response = await fetch(`${API_BASE_URL}/api/auth/me`, {\n            headers: {\n              'Authorization': `Bearer ${token}`\n            }\n          });\n          if (response.ok) {\n            const userData = await response.json();\n            setUser(userData.user);\n          } else {\n            localStorage.removeItem('token');\n            setToken(null);\n          }\n        } catch (error) {\n          console.error('Auth check failed:', error);\n          localStorage.removeItem('token');\n          setToken(null);\n        }\n      }\n      setLoading(false);\n    };\n    checkAuth();\n  }, [token]);\n  const login = async (email, password) => {\n    // ðŸ”§ FIXED: Now uses environment variable\n    const response = await fetch(`${API_BASE_URL}/api/auth/login`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        email,\n        password\n      })\n    });\n    const data = await response.json();\n    if (!data.success) {\n      throw new Error(data.error);\n    }\n    localStorage.setItem('token', data.token);\n    setToken(data.token);\n    setUser(data.user);\n  };\n  const register = async userData => {\n    // ðŸ”§ FIXED: Now uses environment variable\n    const response = await fetch(`${API_BASE_URL}/api/auth/register`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(userData)\n    });\n    const data = await response.json();\n    if (!data.success) {\n      throw new Error(data.error);\n    }\n    localStorage.setItem('token', data.token);\n    setToken(data.token);\n    setUser(data.user);\n  };\n  const logout = () => {\n    localStorage.removeItem('token');\n    setToken(null);\n    setUser(null);\n  };\n  const value = {\n    user,\n    token,\n    login,\n    register,\n    logout,\n    loading\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 110,\n    columnNumber: 5\n  }, this);\n};\n\n// // contexts/AuthContext.jsx\n// import React, { createContext, useContext, useState, useEffect } from 'react';\n\n// const AuthContext = createContext();\n// const API_BASE_URL = 'http://localhost:5000'; // Add this line\n\n// export const useAuth = () => {\n//   const context = useContext(AuthContext);\n//   if (!context) {\n//     throw new Error('useAuth must be used within an AuthProvider');\n//   }\n//   return context;\n// };\n\n// export const AuthProvider = ({ children }) => {\n//   const [user, setUser] = useState(null);\n//   const [loading, setLoading] = useState(true);\n//   const [token, setToken] = useState(localStorage.getItem('token'));\n\n//   // Check if user is logged in on app start\n//   useEffect(() => {\n//     const checkAuth = async () => {\n//       if (token) {\n//         try {\n//           const response = await fetch(`${API_BASE_URL}/api/auth/me`, { // âœ… Fixed\n//             headers: {\n//               'Authorization': `Bearer ${token}`\n//             }\n//           });\n\n//           if (response.ok) {\n//             const userData = await response.json();\n//             setUser(userData.user);\n//           } else {\n//             localStorage.removeItem('token');\n//             setToken(null);\n//           }\n//         } catch (error) {\n//           console.error('Auth check failed:', error);\n//           localStorage.removeItem('token');\n//           setToken(null);\n//         }\n//       }\n//       setLoading(false);\n//     };\n\n//     checkAuth();\n//   }, [token]);\n\n//   const login = async (email, password) => {\n//     const response = await fetch(`${API_BASE_URL}/api/auth/login`, { // âœ… Fixed\n//       method: 'POST',\n//       headers: {\n//         'Content-Type': 'application/json',\n//       },\n//       body: JSON.stringify({ email, password }),\n//     });\n\n//     const data = await response.json();\n\n//     if (!data.success) {\n//       throw new Error(data.error);\n//     }\n\n//     localStorage.setItem('token', data.token);\n//     setToken(data.token);\n//     setUser(data.user);\n//   };\n\n//   const register = async (userData) => {\n//     const response = await fetch(`${API_BASE_URL}/api/auth/register`, { // âœ… Fixed\n//       method: 'POST',\n//       headers: {\n//         'Content-Type': 'application/json',\n//       },\n//       body: JSON.stringify(userData),\n//     });\n\n//     const data = await response.json();\n\n//     if (!data.success) {\n//       throw new Error(data.error);\n//     }\n\n//     localStorage.setItem('token', data.token);\n//     setToken(data.token);\n//     setUser(data.user);\n//   };\n\n//   const logout = () => {\n//     localStorage.removeItem('token');\n//     setToken(null);\n//     setUser(null);\n//   };\n\n//   const value = {\n//     user,\n//     token,\n//     login,\n//     register,\n//     logout,\n//     loading\n//   };\n\n//   return (\n//     <AuthContext.Provider value={value}>\n//       {children}\n//     </AuthContext.Provider>\n//   );\n// };\n_s2(AuthProvider, \"/pbUqy0QsBvMqKPYubk3+KKKH8I=\");\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","jsxDEV","_jsxDEV","AuthContext","API_BASE_URL","process","env","REACT_APP_API_URL","useAuth","_s","context","Error","AuthProvider","children","_s2","user","setUser","loading","setLoading","token","setToken","localStorage","getItem","checkAuth","response","fetch","headers","ok","userData","json","removeItem","error","console","login","email","password","method","body","JSON","stringify","data","success","setItem","register","logout","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Rajat/Desktop/Graph_Visualizer/frontend/src/contexts/AuthContext.jsx"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\r\n\r\nconst AuthContext = createContext();\r\n\r\n// âœ… FIXED: Use environment variable instead of hardcoded localhost\r\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000';\r\n\r\nexport const useAuth = () => {\r\n  const context = useContext(AuthContext);\r\n  if (!context) {\r\n    throw new Error('useAuth must be used within an AuthProvider');\r\n  }\r\n  return context;\r\n};\r\n\r\nexport const AuthProvider = ({ children }) => {\r\n  const [user, setUser] = useState(null);\r\n  const [loading, setLoading] = useState(true);\r\n  const [token, setToken] = useState(localStorage.getItem('token'));\r\n\r\n  // Check if user is logged in on app start\r\n  useEffect(() => {\r\n    const checkAuth = async () => {\r\n      if (token) {\r\n        try {\r\n          // ðŸ”§ FIXED: Now uses environment variable\r\n          const response = await fetch(`${API_BASE_URL}/api/auth/me`, {\r\n            headers: {\r\n              'Authorization': `Bearer ${token}`\r\n            }\r\n          });\r\n          \r\n          if (response.ok) {\r\n            const userData = await response.json();\r\n            setUser(userData.user);\r\n          } else {\r\n            localStorage.removeItem('token');\r\n            setToken(null);\r\n          }\r\n        } catch (error) {\r\n          console.error('Auth check failed:', error);\r\n          localStorage.removeItem('token');\r\n          setToken(null);\r\n        }\r\n      }\r\n      setLoading(false);\r\n    };\r\n\r\n    checkAuth();\r\n  }, [token]);\r\n\r\n  const login = async (email, password) => {\r\n    // ðŸ”§ FIXED: Now uses environment variable\r\n    const response = await fetch(`${API_BASE_URL}/api/auth/login`, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify({ email, password }),\r\n    });\r\n\r\n    const data = await response.json();\r\n\r\n    if (!data.success) {\r\n      throw new Error(data.error);\r\n    }\r\n\r\n    localStorage.setItem('token', data.token);\r\n    setToken(data.token);\r\n    setUser(data.user);\r\n  };\r\n\r\n  const register = async (userData) => {\r\n    // ðŸ”§ FIXED: Now uses environment variable\r\n    const response = await fetch(`${API_BASE_URL}/api/auth/register`, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify(userData),\r\n    });\r\n\r\n    const data = await response.json();\r\n\r\n    if (!data.success) {\r\n      throw new Error(data.error);\r\n    }\r\n\r\n    localStorage.setItem('token', data.token);\r\n    setToken(data.token);\r\n    setUser(data.user);\r\n  };\r\n\r\n  const logout = () => {\r\n    localStorage.removeItem('token');\r\n    setToken(null);\r\n    setUser(null);\r\n  };\r\n\r\n  const value = {\r\n    user,\r\n    token,\r\n    login,\r\n    register,\r\n    logout,\r\n    loading\r\n  };\r\n\r\n  return (\r\n    <AuthContext.Provider value={value}>\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n};\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// // contexts/AuthContext.jsx\r\n// import React, { createContext, useContext, useState, useEffect } from 'react';\r\n\r\n// const AuthContext = createContext();\r\n// const API_BASE_URL = 'http://localhost:5000'; // Add this line\r\n\r\n// export const useAuth = () => {\r\n//   const context = useContext(AuthContext);\r\n//   if (!context) {\r\n//     throw new Error('useAuth must be used within an AuthProvider');\r\n//   }\r\n//   return context;\r\n// };\r\n\r\n// export const AuthProvider = ({ children }) => {\r\n//   const [user, setUser] = useState(null);\r\n//   const [loading, setLoading] = useState(true);\r\n//   const [token, setToken] = useState(localStorage.getItem('token'));\r\n\r\n//   // Check if user is logged in on app start\r\n//   useEffect(() => {\r\n//     const checkAuth = async () => {\r\n//       if (token) {\r\n//         try {\r\n//           const response = await fetch(`${API_BASE_URL}/api/auth/me`, { // âœ… Fixed\r\n//             headers: {\r\n//               'Authorization': `Bearer ${token}`\r\n//             }\r\n//           });\r\n          \r\n//           if (response.ok) {\r\n//             const userData = await response.json();\r\n//             setUser(userData.user);\r\n//           } else {\r\n//             localStorage.removeItem('token');\r\n//             setToken(null);\r\n//           }\r\n//         } catch (error) {\r\n//           console.error('Auth check failed:', error);\r\n//           localStorage.removeItem('token');\r\n//           setToken(null);\r\n//         }\r\n//       }\r\n//       setLoading(false);\r\n//     };\r\n\r\n//     checkAuth();\r\n//   }, [token]);\r\n\r\n//   const login = async (email, password) => {\r\n//     const response = await fetch(`${API_BASE_URL}/api/auth/login`, { // âœ… Fixed\r\n//       method: 'POST',\r\n//       headers: {\r\n//         'Content-Type': 'application/json',\r\n//       },\r\n//       body: JSON.stringify({ email, password }),\r\n//     });\r\n\r\n//     const data = await response.json();\r\n\r\n//     if (!data.success) {\r\n//       throw new Error(data.error);\r\n//     }\r\n\r\n//     localStorage.setItem('token', data.token);\r\n//     setToken(data.token);\r\n//     setUser(data.user);\r\n//   };\r\n\r\n//   const register = async (userData) => {\r\n//     const response = await fetch(`${API_BASE_URL}/api/auth/register`, { // âœ… Fixed\r\n//       method: 'POST',\r\n//       headers: {\r\n//         'Content-Type': 'application/json',\r\n//       },\r\n//       body: JSON.stringify(userData),\r\n//     });\r\n\r\n//     const data = await response.json();\r\n\r\n//     if (!data.success) {\r\n//       throw new Error(data.error);\r\n//     }\r\n\r\n//     localStorage.setItem('token', data.token);\r\n//     setToken(data.token);\r\n//     setUser(data.user);\r\n//   };\r\n\r\n//   const logout = () => {\r\n//     localStorage.removeItem('token');\r\n//     setToken(null);\r\n//     setUser(null);\r\n//   };\r\n\r\n//   const value = {\r\n//     user,\r\n//     token,\r\n//     login,\r\n//     register,\r\n//     logout,\r\n//     loading\r\n//   };\r\n\r\n//   return (\r\n//     <AuthContext.Provider value={value}>\r\n//       {children}\r\n//     </AuthContext.Provider>\r\n//   );\r\n// };\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}